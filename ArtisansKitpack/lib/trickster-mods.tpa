
ACTION_DEFINE_ASSOCIATIVE_ARRAY tricktable BEGIN
  ~C0TR#001~ => 1
  ~C0TR#002~ => 5
  ~C0TR#003~ => 10
  ~C0TR#004~ => 15
  ~C0TR#005~ => 20
  ~C0TR#006~ => 25
  ~C0TR#007~ => 30
  ~C0TR#008~ => 35
  ~C0TR#009~ => 40
END

ACTION_DEFINE_ASSOCIATIVE_ARRAY tricksuffix BEGIN
  ~C0TR#001~ => ~A~
  ~C0TR#002~ => ~B~
  ~C0TR#003~ => ~C~
  ~C0TR#004~ => ~D~
  ~C0TR#005~ => ~E~
  ~C0TR#006~ => ~F~
  ~C0TR#007~ => ~G~
  ~C0TR#008~ => ~H~
  ~C0TR#009~ => ~I~
END
<<<<<<<< .../trickster-mods/empty2da
2DA            V1.0
****
               ResRef         Type
>>>>>>>>
ACTION_PHP_EACH ~tricktable~ AS ~trickname~ => ~maxlevel~ BEGIN
  // blank out previous build
  COPY ~.../trickster-mods/empty2da~ ~override/%trickname%.2DA~
END
OUTER_SET level = 40
COPY_EXISTING_REGEXP - GLOB ~.*\.2DA~ ~override~
  // EXCLUSIONS: 
  PATCH_IF (~%SOURCE_RES%~ STRING_MATCHES_REGEXP ~lu.*~) AND
            (~%SOURCE_RES%~ STRING_MATCHES_REGEXP ~d2kmule.*~) AND
            (~%SOURCE_RES%~ STRING_MATCHES_REGEXP ~C0TR.*~) // DON'T MATCH MYSELF !!
      BEGIN      // if filename does NOT start with lu
    SPRINT ~curr2da~ EVAL ~%SOURCE_RES%~
    COUNT_REGEXP_INSTANCES ~GA_~ check
    PATCH_IF (check > 0) BEGIN
      SET levelrev = level
      COUNT_2DA_COLS cols
      SET col_count = (cols - 1)
      PATCH_IF (level > col_count) BEGIN SET levelrev = col_count END

      //LPF 2DA_MISSING_COLS END    // fill entries if missing to prevent errors
      COUNT_2DA_ROWS 3 rows
      READ_2DA_ENTRIES_NOW ~d2checkmods~ 3
      FOR (r = 1; r < rows; ++r) BEGIN
        FOR (c = 1; c <= levelrev; ++c) BEGIN
          READ_2DA_ENTRY_FORMER ~d2checkmods~ r c entry
          PATCH_IF !(~%entry%~ STRING_MATCHES_REGEXP ~GA_.*~) BEGIN    // if %entry% DOES start with GA_
            INNER_ACTION BEGIN
              OUTER_SET prevmax = 0
              ACTION_PHP_EACH ~tricktable~ AS ~trickname~ => ~maxlevel~ BEGIN
                ACTION_IF (c <= maxlevel) AND (c > prevmax) BEGIN
                  // ADD SPELL TO TABLE
                  COPY_EXISTING ~%trickname%.2DA~ ~override~
                    INNER_PATCH_SAVE CURRAB "%entry%" BEGIN REPLACE_TEXTUALLY CASE_INSENSITIVE EXACT_MATCH ~GA_~ ~~ END
                    LPF GET_UNIQUE_FILE_NAME STR_VAR extension = "SPL" base = EVAL "C0TR#%CURRAB%" RET CURRSPL = filename END
                    SPRINT currsuffix EVAL $tricksuffix(EVAL ~%trickname%~)
                    
                    COUNT_REGEXP_INSTANCES ~%CURRSPL%~ count
                    PATCH_IF (count = 0) BEGIN
                      PATCH_IF FILE_EXISTS_IN_GAME ~%CURRAB%.SPL~ BEGIN
                        PATCH_PRINT ~adding %entry% of level %c% (<= %maxlevel%, > %prevmax%) from %curr2da%.2DA to %trickname%.2DA~
                        SPRINT name ~~
                        SPRINT desc ~~ 
                        SPRINT icon ~~
                        INNER_ACTION BEGIN //create spell wrapper to give ability
                          COPY_EXISTING - ~%CURRAB%.SPL~ ~override~
                            PATCH_IF (SOURCE_SIZE > 0x71) BEGIN
                              READ_STRREF NAME1 name 
                              READ_STRREF UNIDENTIFIED_DESC desc
                              READ_ASCII 0x003a icon (8)
                            END
                           
                          // CREATE SPELL:
                          COPY_EXISTING ~C0TR#30%currsuffix%.SPL~ ~OVERRIDE/%CURRSPL%.SPL~
                            LPF ALTER_SPELL_HEADER STR_VAR icon = EVAL ~%icon%~ END
                            LPF ALTER_EFFECT INT_VAR match_opcode = 171 STR_VAR resource = EVAL ~%CURRAB%~ END
                            SAY_EVALUATED NAME1 ~Mimic: %name%~
                            SAY_EVALUATED UNIDENTIFIED_DESC ~Mimic: %desc%~
                        END //add spell wrapper to table
                        COUNT_2DA_ROWS 3 kmulerows
                        INSERT_2DA_ROW kmulerows 3 ~%curr2da% %CURRSPL% 3~
                        PRETTY_PRINT_2DA
                      END
                    END
                  BUT_ONLY
                END
                OUTER_SET prevmax = maxlevel
              END
            END
          END
        END
      END

    END
  END
  //END
