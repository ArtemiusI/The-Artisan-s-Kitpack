/*

https://www.gibberlings3.net/forums/topic/36242-expanded-alterclonedelete_effect-functions/

Version 2022.12.12 - initial coding

*/

/////                                                  \\\\\
///// CLONE_EFFECT_EX                                  \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION CLONE_EFFECT_EX

  // defines what we're going to check
  INT_VAR check_globals       = 1
          check_headers       = 1
          header              = "-1"
          header_type         = "-1"
          multi_match         = 999
          verbose             = 0
          silent              = 0

  // variables for finding the effect to match
          match_opcode        = "-1"
          match_target        = "-1"
          match_power         = "-1"
          match_parameter1    = "-1"
          match_parameter2    = "-1"
          match_timing        = "-1"
          match_resist_dispel = "-1"
          match_duration      = "-1"
          match_duration_high = "-1"
          match_probability1  = "-1"
          match_probability2  = "-1"
          match_dicenumber    = "-1"
          match_dicesize      = "-1"
          match_savingthrow   = "-1"
          match_savebonus     = "-11"
          match_special       = "-1"

  // variables for the new effect
          opcode              = "-1"
          target              = "-1"
          power               = "-1"
          parameter1          = "-1"
          parameter2          = "-1"
          timing              = "-1"
          resist_dispel       = "-1"
          duration            = "-1"
          duration_high       = "-1"
          probability1        = "-1"
          probability2        = "-1"
          dicenumber          = "-1"
          dicesize            = "-1"
          savingthrow         = "-1"
          savebonus           = "-11"
          special             = "-1"

  // same for match and new STR_VAR
  STR_VAR match_resource      = "SAME"
          resource            = "SAME"
          insert              = "above"

  // defines what we're going to check
          header_type_ex         = ~((header = index) OR (header < 0))~

  // string variables for finding the effect to match
          match_opcode_ex        = ~((match_opcode        = o_opcode)        OR (match_opcode < 0))~
          match_target_ex        = ~((match_target        = o_target)        OR (match_target < 0))~
          match_power_ex         = ~((match_power         = o_power)         OR (match_power < 0))~
          match_parameter1_ex    = ~((match_parameter1    = o_parameter1)    OR (match_parameter1 < 0))~
          match_parameter2_ex    = ~((match_parameter2    = o_parameter2)    OR (match_parameter2 < 0))~
          match_timing_ex        = ~((match_timing        = o_timing)        OR (match_timing < 0))~
          match_resist_dispel_ex = ~((match_resist_dispel = o_resist_dispel) OR (match_resist_dispel < 0))~
          match_duration_ex      = ~((match_duration      = o_duration)      OR (match_duration < 0))~
          match_probability1_ex  = ~((match_probability1  = o_probability1)  OR (match_probability1 < 0))~
          match_probability2_ex  = ~((match_probability2  = o_probability2)  OR (match_probability2 < 0))~
          match_dicenumber_ex    = ~((match_dicenumber    = o_dicenumber)    OR (match_dicenumber < 0))~
          match_dicesize_ex      = ~((match_dicesize      = o_dicesize)      OR (match_dicesize < 0))~
          match_savingthrow_ex   = ~((match_savingthrow   = o_savingthrow)   OR (match_savingthrow < 0))~
          match_savebonus_ex     = ~((match_savebonus     = o_savebonus)     OR (match_savebonus < "-10"))~
          match_special_ex       = ~((match_special       = o_special)       OR (match_special < 0))~
          match_resource_ex      = ~(("%match_resource%" STRING_COMPARE_CASE "%o_resource%" = 0) OR ("%match_resource%" STRING_COMPARE_CASE "SAME" = 0))~

  // stringvariables for the new effect
          opcode_ex              = "SAME"
          target_ex              = "SAME"
          power_ex               = "SAME"
          parameter1_ex          = "SAME"
          parameter2_ex          = "SAME"
          timing_ex              = "SAME"
          resist_dispel_ex       = "SAME"
          duration_ex            = "SAME"
          probability1_ex        = "SAME"
          probability2_ex        = "SAME"
          dicenumber_ex          = "SAME"
          dicesize_ex            = "SAME"
          savingthrow_ex         = "SAME"
          savebonus_ex           = "SAME"
          special_ex             = "SAME"
          resource_ex            = "SAME"

BEGIN

  // set variables and offsets based on the file type
  SET new_fx = 0
  READ_ASCII 0 sig ELSE "fail" (4)
  READ_ASCII 0x04 version (4)
  PATCH_MATCH "%sig%" WITH
    "SPL "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.0" = 0) BEGIN // iwd2, spl 2.0
        SET min_size       = 0x82
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x28
      SET fx_type        = 0
      READ_LONG   0x64 abil_off ELSE 0
      READ_SHORT  0x68 abil_num ELSE 0
    END

    "ITM "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.1" = 0) BEGIN // pst, itm v1.1
        SET min_size       = 0x9a
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x38
      SET fx_type        = 0
      READ_LONG   0x64 abil_off ELSE 0
      READ_SHORT  0x68 abil_num ELSE 0
    END

    "CRE "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.2" = 0) BEGIN // pst, cre v1.2
        SET min_size       = 0x378
        READ_LONG  0x368 fx_off
        SET counter_offset = 0x36c
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.2" = 0) BEGIN // iwd2, cre v2.2
        SET min_size       = 0x62e
        READ_LONG  0x61e fx_off
        SET counter_offset = 0x622
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V9.0" = 0) BEGIN // iwd, cre v9.0
        SET min_size       = 0x33c
        READ_LONG  0x32c fx_off
        SET counter_offset = 0x330
      END ELSE BEGIN                                               // everything else, cre v1.0
        SET min_size = 0x2d4
        READ_LONG  0x2c4 fx_off
        SET counter_offset = 0x2c8
      END
      SET abil_off = 0 // basically prevents the ability effect loop
      SET abil_num = 0
      SET abil_length = 0
      SET check_globals = 1
      READ_BYTE 0x33 fx_type ELSE 2
    END

    "fail"
    BEGIN
      PATCH_WARN "ERROR: CLONE_EFFECT_EX does not think %SOURCE_FILE% appears to be a valid file"
    END

    DEFAULT
      SET min_size = "-1" // kill macro as the file type is not recognized
      PATCH_WARN "ERROR: CLONE_EFFECT_EX does not support file type %sig%"
  END
  
  SPRINT o_SOURCE_FILE ~%SOURCE_FILE%~ // preserve original copy vars
  SPRINT o_SOURCE_RES  ~%SOURCE_RES%~
  SPRINT o_DEST_FILE   ~%DEST_FILE%~
  SPRINT o_DEST_RES    ~%DEST_RES%~
  
  INNER_ACTION BEGIN
  
<<<<<<<<./inline/clone_effect_ex_macro.tph

DEFINE_PATCH_MACRO clone_effect_ex_macro_working BEGIN

      PATCH_IF (((abil_type = header_type) OR (abil_type < 0) OR (header_type < 0)) AND // only look on the right header types, if specified...
                (REPLACE_header_type_ex) AND                                            // and only on the right # header, if specified
                ((index < 0) OR (check_headers))) BEGIN                                 // if check headers = 0, only re-index
        SET last = 0                              // and only on the right # header, if specified
        SET local_multi = multi_match
        FOR (index2 = 0 ; index2 < (counter - last) ; ++index2) BEGIN

          // read the variables from the current effect
          READ_SHORT (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_opcode
          READ_BYTE  (fx_off + 0x02 + (0x0a * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_target
          READ_BYTE  (fx_off + 0x03 + (0x0d * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_power
          READ_LONG  (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter1
          READ_LONG  (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter2
          READ_BYTE  (fx_off + 0x0c + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_timing
          READ_BYTE  (fx_off + 0x0d + (0x47 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resist_dispel
          READ_LONG  (fx_off + 0x0e + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_duration
          READ_BYTE  (fx_off + 0x12 + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability1
          READ_BYTE  (fx_off + 0x13 + (0x13 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability2
          READ_ASCII (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resource
          READ_LONG  (fx_off + 0x1c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicenumber
          READ_LONG  (fx_off + 0x20 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicesize
          READ_LONG  (fx_off + 0x24 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savingthrow
          READ_LONG  (fx_off + 0x28 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savebonus
          READ_LONG  (fx_off + 0x2c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_special

          // match ALL these variables, if specified
          PATCH_IF ((REPLACE_match_opcode_ex)        AND
                    (REPLACE_match_target_ex)        AND
                    (REPLACE_match_power_ex)         AND
                    (REPLACE_match_parameter1_ex)    AND
                    (REPLACE_match_parameter2_ex)    AND
                    (REPLACE_match_timing_ex)        AND
                    (REPLACE_match_resist_dispel_ex) AND
                    (REPLACE_match_duration_ex)      AND
                    (REPLACE_match_probability1_ex)  AND
                    (REPLACE_match_probability2_ex)  AND
                    (REPLACE_match_dicenumber_ex)    AND
                    (REPLACE_match_dicesize_ex)      AND
                    (REPLACE_match_savingthrow_ex)   AND
                    (REPLACE_match_savebonus_ex)     AND
                    (REPLACE_match_special_ex)       AND
                    (REPLACE_match_resource_ex))
          BEGIN

            // now that we've got a match, read-and-clone it:
            READ_ASCII   (fx_off        + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) clone (0x30 + (0xd8 * fx_type))
            PATCH_IF ("%insert%" STRING_COMPARE_CASE "below" = 0) BEGIN
              SET base = (fx_off        + ((abil_fx_idx + index2 + 1) * (0x30 + (0xd8 * fx_type))))
            END ELSE
            PATCH_IF ("%insert%" STRING_COMPARE_CASE "first" = 0) BEGIN
              SET base = (fx_off        + (abil_fx_idx * (0x30 + (0xd8 * fx_type))))
            END ELSE
            PATCH_IF ("%insert%" STRING_COMPARE_CASE "last" = 0) BEGIN
              SET base = (fx_off        + ((abil_fx_idx + counter) * (0x30 + (0xd8 * fx_type))))
            END ELSE BEGIN
              SET base = (fx_off        + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type))))
            END
            INSERT_BYTES base (0x30 + (0xd8 * fx_type))
            WRITE_ASCIIE base "%clone%"

            // overwrite the cloned effect with the new variables, if specified
            PATCH_IF ("%opcode_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base        + (0x08 * fx_type)) (REPLACE_opcode_ex)        END ELSE BEGIN 
            PATCH_IF (opcode >= 0)        BEGIN WRITE_SHORT (base        + (0x08 * fx_type)) opcode        END END 
            PATCH_IF ("%target_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x02 + (0x0a * fx_type)) (REPLACE_target_ex)        END ELSE BEGIN  
            PATCH_IF (target >= 0)        BEGIN WRITE_BYTE  (base + 0x02 + (0x0a * fx_type)) target        END END 
            PATCH_IF ("%power_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x03 + (0x0d * fx_type)) (REPLACE_power_ex)         END ELSE BEGIN
            PATCH_IF (power >= 0)         BEGIN WRITE_BYTE  (base + 0x03 + (0x0d * fx_type)) power         END END 
            PATCH_IF ("%parameter1_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x04 + (0x10 * fx_type)) (REPLACE_parameter1_ex)    END ELSE BEGIN
            PATCH_IF (parameter1 >= 0)    BEGIN WRITE_LONG  (base + 0x04 + (0x10 * fx_type)) parameter1    END END 
            PATCH_IF ("%parameter2_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x08 + (0x10 * fx_type)) (REPLACE_parameter2_ex)    END ELSE BEGIN
            PATCH_IF (parameter2 >= 0)    BEGIN WRITE_LONG  (base + 0x08 + (0x10 * fx_type)) parameter2    END END 
            PATCH_IF ("%timing_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0c + (0x10 * fx_type)) (REPLACE_timing_ex)        END ELSE BEGIN
            PATCH_IF (timing >= 0)        BEGIN WRITE_BYTE  (base + 0x0c + (0x10 * fx_type)) timing        END END 
            PATCH_IF ("%resist_dispel_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0d + (0x47 * fx_type)) (REPLACE_resist_dispel_ex) END ELSE BEGIN
            PATCH_IF (resist_dispel >= 0) BEGIN WRITE_BYTE  (base + 0x0d + (0x47 * fx_type)) resist_dispel END END 
            PATCH_IF ("%duration_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x0e + (0x12 * fx_type)) (REPLACE_duration_ex)      END ELSE BEGIN
            PATCH_IF (duration >= 0)      BEGIN WRITE_LONG  (base + 0x0e + (0x12 * fx_type)) duration      END END 
            PATCH_IF ("%probability1_ex%"  STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x12 + (0x12 * fx_type)) (REPLACE_probability1_ex)  END ELSE BEGIN
            PATCH_IF (probability1 >= 0)  BEGIN WRITE_BYTE  (base + 0x12 + (0x12 * fx_type)) probability1  END END 
            PATCH_IF ("%probability2_ex%"  STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x13 + (0x13 * fx_type)) (REPLACE_probability2_ex)  END ELSE BEGIN
            PATCH_IF (probability2 >= 0)  BEGIN WRITE_BYTE  (base + 0x13 + (0x13 * fx_type)) probability2  END END 
            PATCH_IF ("%dicenumber_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x1c + (0x14 * fx_type)) (REPLACE_dicenumber_ex)    END ELSE BEGIN
            PATCH_IF (dicenumber >= 0)    BEGIN WRITE_LONG  (base + 0x1c + (0x14 * fx_type)) dicenumber    END END 
            PATCH_IF ("%dicesize_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x20 + (0x14 * fx_type)) (REPLACE_dicesize_ex)      END ELSE BEGIN
            PATCH_IF (dicesize >= 0)      BEGIN WRITE_LONG  (base + 0x20 + (0x14 * fx_type)) dicesize      END END 
            PATCH_IF ("%savingthrow_ex%"   STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x24 + (0x14 * fx_type)) (REPLACE_savingthrow_ex)   END ELSE BEGIN
            PATCH_IF (savingthrow >= 0)   BEGIN WRITE_LONG  (base + 0x24 + (0x14 * fx_type)) savingthrow   END END 
            PATCH_IF ("%savebonus_ex%"     STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x28 + (0x14 * fx_type)) (REPLACE_savebonus_ex)     END ELSE BEGIN
            PATCH_IF (savebonus >= "-10") BEGIN WRITE_LONG  (base + 0x28 + (0x14 * fx_type)) savebonus     END END 
            PATCH_IF ("%special_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x2c + (0x14 * fx_type)) (REPLACE_special_ex)       END ELSE BEGIN
            PATCH_IF (special >= 0)       BEGIN WRITE_LONG  (base + 0x2c + (0x14 * fx_type)) special       END END 
            
            PATCH_IF ("%resource_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_ASCIIE (base + 0x14 + (0x14 * fx_type)) REPLACE_resource_ex #8       END ELSE BEGIN
            PATCH_IF ("%resource%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_ASCIIE (base + 0x14 + (0x14 * fx_type)) "%resource%" #8 END END 

            // update the tracking vars
            SET new_fx += 1
            SET counter += 1
            PATCH_IF (local_multi < 2) BEGIN  // kill loop if we only want one match
              SET index2 = counter
            END ELSE BEGIN // otherwise bump vars and keep going
              SET local_multi  -= 1
              PATCH_IF ("%insert%" STRING_COMPARE_CASE "last" = 0) BEGIN
                SET last += 1
              END ELSE BEGIN
                SET index2 += 1
              END
            END

          END // end patch_if for a matched effect
        END // end of the for loop through effects
      END // end patch_if for matched/specified headers

END
      
>>>>>>>>

    COPY ~./inline/clone_effect_ex_macro.tph~ ~./inline/clone_effect_ex_macro_working.tph~
      REPLACE_TEXTUALLY ~REPLACE_header_type_ex~         ~%header_type_ex%~
      REPLACE_TEXTUALLY ~REPLACE_match_opcode_ex~        ~%match_opcode_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_target_ex~        ~%match_target_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_power_ex~         ~%match_power_ex%~         
      REPLACE_TEXTUALLY ~REPLACE_match_parameter1_ex~    ~%match_parameter1_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_parameter2_ex~    ~%match_parameter2_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_timing_ex~        ~%match_timing_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_resist_dispel_ex~ ~%match_resist_dispel_ex%~ 
      REPLACE_TEXTUALLY ~REPLACE_match_duration_ex~      ~%match_duration_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_probability1_ex~  ~%match_probability1_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_probability2_ex~  ~%match_probability2_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_dicenumber_ex~    ~%match_dicenumber_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_dicesize_ex~      ~%match_dicesize_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_savingthrow_ex~   ~%match_savingthrow_ex%~   
      REPLACE_TEXTUALLY ~REPLACE_match_savebonus_ex~     ~%match_savebonus_ex%~     
      REPLACE_TEXTUALLY ~REPLACE_match_special_ex~       ~%match_special_ex%~       
      REPLACE_TEXTUALLY ~REPLACE_opcode_ex~              ~%opcode_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_target_ex~              ~%target_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_power_ex~               ~%power_ex%~               
      REPLACE_TEXTUALLY ~REPLACE_parameter1_ex~          ~%parameter1_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_parameter2_ex~          ~%parameter2_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_timing_ex~              ~%timing_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_resist_dispel_ex~       ~%resist_dispel_ex%~       
      REPLACE_TEXTUALLY ~REPLACE_duration_ex~            ~%duration_ex%~            
      REPLACE_TEXTUALLY ~REPLACE_probability1_ex~        ~%probability1_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_probability2_ex~        ~%probability2_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_dicenumber_ex~          ~%dicenumber_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_dicesize_ex~            ~%dicesize_ex%~            
      REPLACE_TEXTUALLY ~REPLACE_savingthrow_ex~         ~%savingthrow_ex%~         
      REPLACE_TEXTUALLY ~REPLACE_savebonus_ex~           ~%savebonus_ex%~           
      REPLACE_TEXTUALLY ~REPLACE_special_ex~             ~%special_ex%~             
      REPLACE_TEXTUALLY ~REPLACE_match_resource_ex~      ~%match_resource_ex%~
      REPLACE_TEXTUALLY ~REPLACE_resource_ex~            ~%resource_ex%~
      
      REINCLUDE ~./inline/clone_effect_ex_macro_working.tph~
  
  END // end INNER_ACTION
  
  SPRINT SOURCE_FILE ~%o_SOURCE_FILE%~ // reset copy vars
  SPRINT SOURCE_RES  ~%o_SOURCE_RES%~
  SPRINT DEST_FILE   ~%o_DEST_FILE%~
  SPRINT DEST_RES    ~%o_DEST_RES%~

  PATCH_IF (BUFFER_LENGTH >= min_size) BEGIN // sanity check
    FOR (index = (0 - check_globals) ; index < abil_num ; ++index) BEGIN // we start at -1 for global effects
      PATCH_IF (index < 0) BEGIN // if loop through globals needed
        SET abil_fx_idx = 0  // start with effect 0 since we're in the global loop
        SET abil_type = "-1" // basically, ignore header type checks for global loop
      END ELSE BEGIN // otherwise normal ability
        READ_BYTE   (abil_off +        (abil_length * index)) abil_type
        SET counter_offset = (abil_off + 0x1e + (abil_length * index))
        WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (THIS + new_fx) // update index with previously added effects
        READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
      END
      READ_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
      LAUNCH_PATCH_MACRO clone_effect_ex_macro_working
      WRITE_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
    END // end loop through effects on ability
  END // end ability loop

  // now adjust offsets for creature files
  PATCH_IF (("%sig%" STRING_EQUAL "CRE ") AND (new_fx > 0)) BEGIN // fix offsets for cre files if fx inserted
    SET inserted = ((0x30 + (0xd8 * fx_type)) * new_fx)
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.2" = 0) BEGIN // pst, cre v1.2
      PATCH_FOR_EACH offset IN 0x294 0x344 0x34c 0x354 0x35c 0x360 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.2" = 0) BEGIN // iwd2, cre v2.2
      PATCH_FOR_EACH offset IN 0x5fa 0x602 0x60a 0x612 0x616 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
      FOR (offset = 0x3ba ; offset < 0x4b3 ; offset = offset + 0x04) BEGIN // all of the spell offsets
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
      FOR (offset = 0x5b2 ; offset < 0x5d3 ; offset = offset + 0x04) BEGIN // domain spell offsets
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V9.0" = 0) BEGIN // iwd, cre v9.0
      PATCH_FOR_EACH offset IN 0x308 0x310 0x318 0x320 0x324 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE BEGIN                                               // everything else, cre v1.0
      PATCH_FOR_EACH offset IN 0x2a0 0x2a8 0x2b0 0x2b8 0x2bc BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END
  END

  PATCH_IF (new_fx = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no effects added to %SOURCE_FILE% via CLONE_EFFECT_FX"
  END ELSE PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %new_fx% effect(s) added via CLONE_EFFECT_FX"
  END

END

/////                                                  \\\\\
///// DELETE_EFFECT_EX                                 \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION DELETE_EFFECT_EX

  // defines what we're going to check
  INT_VAR check_globals       = 1
          check_headers       = 1
          header              = "-1"
          header_type         = "-1"
          multi_match         = 999
          verbose             = 0

  // variables for finding the effect to match
          match_opcode        = "-1"
          match_target        = "-1"
          match_power         = "-1"
          match_parameter1    = "-1"
          match_parameter2    = "-1"
          match_timing        = "-1"
          match_resist_dispel = "-1"
          match_duration      = "-1"
          match_duration_high = "-1"
          match_probability1  = "-1"
          match_probability2  = "-1"
          match_dicenumber    = "-1"
          match_dicesize      = "-1"
          match_savingthrow   = "-1"
          match_savebonus     = "-11"
          match_special       = "-1"

  // same for match and new STR_VAR
  STR_VAR match_resource      = "SAME"

  // defines what we're going to check
          header_type_ex         = ~((header = index) OR (header < 0))~

  // string variables for finding the effect to match
          match_opcode_ex        = ~((match_opcode        = o_opcode)        OR (match_opcode < 0))~
          match_target_ex        = ~((match_target        = o_target)        OR (match_target < 0))~
          match_power_ex         = ~((match_power         = o_power)         OR (match_power < 0))~
          match_parameter1_ex    = ~((match_parameter1    = o_parameter1)    OR (match_parameter1 < 0))~
          match_parameter2_ex    = ~((match_parameter2    = o_parameter2)    OR (match_parameter2 < 0))~
          match_timing_ex        = ~((match_timing        = o_timing)        OR (match_timing < 0))~
          match_resist_dispel_ex = ~((match_resist_dispel = o_resist_dispel) OR (match_resist_dispel < 0))~
          match_duration_ex      = ~((match_duration      = o_duration)      OR (match_duration < 0))~
          match_probability1_ex  = ~((match_probability1  = o_probability1)  OR (match_probability1 < 0))~
          match_probability2_ex  = ~((match_probability2  = o_probability2)  OR (match_probability2 < 0))~
          match_dicenumber_ex    = ~((match_dicenumber    = o_dicenumber)    OR (match_dicenumber < 0))~
          match_dicesize_ex      = ~((match_dicesize      = o_dicesize)      OR (match_dicesize < 0))~
          match_savingthrow_ex   = ~((match_savingthrow   = o_savingthrow)   OR (match_savingthrow < 0))~
          match_savebonus_ex     = ~((match_savebonus     = o_savebonus)     OR (match_savebonus < "-10"))~
          match_special_ex       = ~((match_special       = o_special)       OR (match_special < 0))~
          match_resource_ex      = ~(("%match_resource%" STRING_COMPARE_CASE "%o_resource%" = 0) OR ("%match_resource%" STRING_COMPARE_CASE "SAME" = 0))~

BEGIN

  // set variables and offsets based on the file type
  SET new_fx = 0
  READ_ASCII 0 sig ELSE "fail" (4)
  READ_ASCII 0x04 version (4)
  PATCH_MATCH "%sig%" WITH
    "SPL "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.0" = 0) BEGIN // iwd2, spl 2.0
        SET min_size       = 0x82
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x28
      SET fx_type        = 0
      READ_LONG   0x64 abil_off ELSE 0
      READ_SHORT  0x68 abil_num ELSE 0
    END

    "ITM "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.1" = 0) BEGIN // pst, itm v1.1
        SET min_size       = 0x9a
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x38
      SET fx_type        = 0
      READ_LONG   0x64 abil_off ELSE 0
      READ_SHORT  0x68 abil_num ELSE 0
    END

    "CRE "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.2" = 0) BEGIN // pst, cre v1.2
        SET min_size       = 0x378
        READ_LONG  0x368 fx_off
        SET counter_offset = 0x36c
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.2" = 0) BEGIN // iwd2, cre v2.2
        SET min_size       = 0x62e
        READ_LONG  0x61e fx_off
        SET counter_offset = 0x622
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V9.0" = 0) BEGIN // iwd, cre v9.0
        SET min_size       = 0x33c
        READ_LONG  0x32c fx_off
        SET counter_offset = 0x330
      END ELSE BEGIN                                               // everything else, cre v1.0
        SET min_size = 0x2d4
        READ_LONG  0x2c4 fx_off
        SET counter_offset = 0x2c8
      END
      SET abil_off = 0 // basically prevents the ability effect loop
      SET abil_num = 0
      SET abil_length = 0
      SET check_globals = 1
      READ_BYTE 0x33 fx_type ELSE 2
    END

    "fail"
    BEGIN
      PATCH_WARN "WARNING: DELETE_EFFECT_EX does not think %SOURCE_FILE% appears to be a valid file"
    END

    DEFAULT
      SET min_size = "-1" // kill macro as the file type is not recognized
      PATCH_WARN "WARNING: DELETE_EFFECT_EX does not support file type %sig%"
  END
  
  SPRINT o_SOURCE_FILE ~%SOURCE_FILE%~ // preserve original copy vars
  SPRINT o_SOURCE_RES  ~%SOURCE_RES%~
  SPRINT o_DEST_FILE   ~%DEST_FILE%~
  SPRINT o_DEST_RES    ~%DEST_RES%~
  INNER_ACTION BEGIN
  
<<<<<<<<./inline/delete_effect_ex_macro.tph

DEFINE_PATCH_MACRO delete_effect_ex_macro_working BEGIN

      PATCH_IF (((abil_type = header_type) OR (abil_type < 0) OR (header_type < 0)) AND // only look on the right header types, if specified...
                (REPLACE_header_type_ex) AND                                  // and only on the right # header, if specified
                ((index < 0) OR (check_headers))) BEGIN                                 // if check headers = 0, only re-index
        SET local_multi = multi_match
        FOR (index2 = 0 ; index2 < counter ; ++index2) BEGIN

          // read the variables from the current effect
          READ_SHORT (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_opcode
          READ_BYTE  (fx_off + 0x02 + (0x0a * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_target
          READ_BYTE  (fx_off + 0x03 + (0x0d * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_power
          READ_LONG  (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter1
          READ_LONG  (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter2
          READ_BYTE  (fx_off + 0x0c + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_timing
          READ_BYTE  (fx_off + 0x0d + (0x47 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resist_dispel
          READ_LONG  (fx_off + 0x0e + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_duration
          READ_BYTE  (fx_off + 0x12 + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability1
          READ_BYTE  (fx_off + 0x13 + (0x13 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability2
          READ_ASCII (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resource
          READ_LONG  (fx_off + 0x1c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicenumber
          READ_LONG  (fx_off + 0x20 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicesize
          READ_LONG  (fx_off + 0x24 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savingthrow
          READ_LONG  (fx_off + 0x28 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savebonus
          READ_LONG  (fx_off + 0x2c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_special

          // match ALL these variables, if specified
          PATCH_IF ((REPLACE_match_opcode_ex)        AND
                    (REPLACE_match_target_ex)        AND
                    (REPLACE_match_power_ex)         AND
                    (REPLACE_match_parameter1_ex)    AND
                    (REPLACE_match_parameter2_ex)    AND
                    (REPLACE_match_timing_ex)        AND
                    (REPLACE_match_resist_dispel_ex) AND
                    (REPLACE_match_duration_ex)      AND
                    (REPLACE_match_probability1_ex)  AND
                    (REPLACE_match_probability2_ex)  AND
                    (REPLACE_match_dicenumber_ex)    AND
                    (REPLACE_match_dicesize_ex)      AND
                    (REPLACE_match_savingthrow_ex)   AND
                    (REPLACE_match_savebonus_ex)     AND
                    (REPLACE_match_special_ex)       AND
                    (REPLACE_match_resource_ex))
          BEGIN

            // now that we've got a match, read-and-clone it:
            DELETE_BYTES   (fx_off        + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) (0x30 + (0xd8 * fx_type))

            // update the tracking vars
            SET new_fx -= 1
            SET counter -= 1
            SET index2 -= 1
            PATCH_IF (local_multi < 2) BEGIN  // kill loop if we only want one match
              SET index2 = counter
            END ELSE BEGIN // otherwise bump vars and keep going
              SET local_multi  -= 1
            END

          END // end patch_if for a matched effect
        END // end of the for loop through effects
      END // end patch_if for matched/specified headers

END
      
>>>>>>>>

    COPY ~./inline/delete_effect_ex_macro.tph~ ~./inline/delete_effect_ex_macro_working.tph~
      REPLACE_TEXTUALLY ~REPLACE_header_type_ex~         ~%header_type_ex%~
      REPLACE_TEXTUALLY ~REPLACE_match_opcode_ex~        ~%match_opcode_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_target_ex~        ~%match_target_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_power_ex~         ~%match_power_ex%~         
      REPLACE_TEXTUALLY ~REPLACE_match_parameter1_ex~    ~%match_parameter1_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_parameter2_ex~    ~%match_parameter2_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_timing_ex~        ~%match_timing_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_resist_dispel_ex~ ~%match_resist_dispel_ex%~ 
      REPLACE_TEXTUALLY ~REPLACE_match_duration_ex~      ~%match_duration_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_probability1_ex~  ~%match_probability1_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_probability2_ex~  ~%match_probability2_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_dicenumber_ex~    ~%match_dicenumber_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_dicesize_ex~      ~%match_dicesize_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_savingthrow_ex~   ~%match_savingthrow_ex%~   
      REPLACE_TEXTUALLY ~REPLACE_match_savebonus_ex~     ~%match_savebonus_ex%~     
      REPLACE_TEXTUALLY ~REPLACE_match_special_ex~       ~%match_special_ex%~   
      REPLACE_TEXTUALLY ~REPLACE_match_resource_ex~      ~%match_resource_ex%~
      
      REINCLUDE ~./inline/delete_effect_ex_macro_working.tph~
  
  END // end INNER_ACTION
  
  SPRINT SOURCE_FILE ~%o_SOURCE_FILE%~ // reset copy vars
  SPRINT SOURCE_RES  ~%o_SOURCE_RES%~
  SPRINT DEST_FILE   ~%o_DEST_FILE%~
  SPRINT DEST_RES    ~%o_DEST_RES%~

  PATCH_IF (BUFFER_LENGTH >= min_size) BEGIN // sanity check
    FOR (index = (0 - check_globals) ; index < abil_num ; ++index) BEGIN // we start at -1 for global effects
      PATCH_IF (index < 0) BEGIN // if loop through globals needed
        SET abil_fx_idx = 0  // start with effect 0 since we're in the global loop
        SET abil_type = "-1" // basically, ignore header type checks for global loop
      END ELSE BEGIN // otherwise normal ability
        READ_BYTE   (abil_off +        (abil_length * index)) abil_type
        SET counter_offset = (abil_off + 0x1e + (abil_length * index))
        WRITE_SHORT (abil_off + 0x20 + (abil_length * index)) (THIS + new_fx) // update index with previously added effects
        READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
      END
      READ_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
      LAUNCH_PATCH_MACRO delete_effect_ex_macro_working
      WRITE_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
    END // end loop through effects on ability
  END // end ability loop

  // now adjust offsets for creature files
  PATCH_IF (("%sig%" STRING_EQUAL "CRE ") AND (new_fx != 0)) BEGIN // fix offsets for cre files if #fx changed
    SET inserted = ((0x30 + (0xd8 * fx_type)) * new_fx)
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.2" = 0) BEGIN // pst, cre v1.2
      PATCH_FOR_EACH offset IN 0x294 0x344 0x34c 0x354 0x35c 0x360 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.2" = 0) BEGIN // iwd2, cre v2.2
      PATCH_FOR_EACH offset IN 0x5fa 0x602 0x60a 0x612 0x616 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
      FOR (offset = 0x3ba ; offset < 0x4b3 ; offset = offset + 0x04) BEGIN // all of the spell offsets
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
      FOR (offset = 0x5b2 ; offset < 0x5d3 ; offset = offset + 0x04) BEGIN // domain spell offsets
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE
    PATCH_IF ("%version%" STRING_COMPARE_CASE "V9.0" = 0) BEGIN // iwd, cre v9.0
      PATCH_FOR_EACH offset IN 0x308 0x310 0x318 0x320 0x324 BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END ELSE BEGIN                                               // everything else, cre v1.0
      PATCH_FOR_EACH offset IN 0x2a0 0x2a8 0x2b0 0x2b8 0x2bc BEGIN
        READ_LONG offset off
        PATCH_IF (fx_off < off) BEGIN
          WRITE_LONG offset (off + inserted)
        END
      END
    END
  END

  PATCH_IF (verbose) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %new_fx% effect(s) deleted via DELETE_EFFECT_EX"
  END

END

/////                                                  \\\\\
///// ALTER_EFFECT_EX                                  \\\\\
/////                                                  \\\\\

DEFINE_PATCH_FUNCTION ALTER_EFFECT_EX

  // defines what we're going to check
  INT_VAR check_globals       = 1
          check_headers       = 1
          header              = "-1"
          header_type         = "-1"
          multi_match         = 999
          verbose             = 0
          silent              = 0

  // variables for finding the effect to match
          match_opcode        = "-1"
          match_target        = "-1"
          match_power         = "-1"
          match_parameter1    = "-1"
          match_parameter2    = "-1"
          match_timing        = "-1"
          match_resist_dispel = "-1"
          match_duration      = "-1"
          match_duration_high = "-1"
          match_probability1  = "-1"
          match_probability2  = "-1"
          match_dicenumber    = "-1"
          match_dicesize      = "-1"
          match_savingthrow   = "-1"
          match_savebonus     = "-11"
          match_special       = "-1"

  // variables for the new effect
          opcode              = "-1"
          target              = "-1"
          power               = "-1"
          parameter1          = "-1"
          parameter2          = "-1"
          timing              = "-1"
          resist_dispel       = "-1"
          duration            = "-1"
          duration_high       = "-1"
          probability1        = "-1"
          probability2        = "-1"
          dicenumber          = "-1"
          dicesize            = "-1"
          savingthrow         = "-1"
          savebonus           = "-11"
          special             = "-1"

  // same for match and new STR_VAR
  STR_VAR match_resource      = "SAME"
          resource            = "SAME"

  // defines what we're going to check
          header_type_ex         = ~((header = index) OR (header < 0))~

  // string variables for finding the effect to match
          match_opcode_ex        = ~((match_opcode        = o_opcode)        OR (match_opcode < 0))~
          match_target_ex        = ~((match_target        = o_target)        OR (match_target < 0))~
          match_power_ex         = ~((match_power         = o_power)         OR (match_power < 0))~
          match_parameter1_ex    = ~((match_parameter1    = o_parameter1)    OR (match_parameter1 < 0))~
          match_parameter2_ex    = ~((match_parameter2    = o_parameter2)    OR (match_parameter2 < 0))~
          match_timing_ex        = ~((match_timing        = o_timing)        OR (match_timing < 0))~
          match_resist_dispel_ex = ~((match_resist_dispel = o_resist_dispel) OR (match_resist_dispel < 0))~
          match_duration_ex      = ~((match_duration      = o_duration)      OR (match_duration < 0))~
          match_probability1_ex  = ~((match_probability1  = o_probability1)  OR (match_probability1 < 0))~
          match_probability2_ex  = ~((match_probability2  = o_probability2)  OR (match_probability2 < 0))~
          match_dicenumber_ex    = ~((match_dicenumber    = o_dicenumber)    OR (match_dicenumber < 0))~
          match_dicesize_ex      = ~((match_dicesize      = o_dicesize)      OR (match_dicesize < 0))~
          match_savingthrow_ex   = ~((match_savingthrow   = o_savingthrow)   OR (match_savingthrow < 0))~
          match_savebonus_ex     = ~((match_savebonus     = o_savebonus)     OR (match_savebonus < "-10"))~
          match_special_ex       = ~((match_special       = o_special)       OR (match_special < 0))~
          match_resource_ex      = ~(("%match_resource%" STRING_COMPARE_CASE "%o_resource%" = 0) OR ("%match_resource%" STRING_COMPARE_CASE "SAME" = 0))~

  // stringvariables for the new effect
          opcode_ex              = "SAME"
          target_ex              = "SAME"
          power_ex               = "SAME"
          parameter1_ex          = "SAME"
          parameter2_ex          = "SAME"
          timing_ex              = "SAME"
          resist_dispel_ex       = "SAME"
          duration_ex            = "SAME"
          probability1_ex        = "SAME"
          probability2_ex        = "SAME"
          dicenumber_ex          = "SAME"
          dicesize_ex            = "SAME"
          savingthrow_ex         = "SAME"
          savebonus_ex           = "SAME"
          special_ex             = "SAME"
          resource_ex            = "SAME"

BEGIN  

  // set variables and offsets based on the file type
  SET alter = 0
  READ_ASCII 0 sig ELSE "fail" (4)
  READ_ASCII 0x04 version (4)
  PATCH_MATCH "%sig%" WITH
    "SPL "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.0" = 0) BEGIN // iwd2, spl 2.0
        SET min_size       = 0x82
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x28
      SET fx_type        = 0
      PATCH_IF (check_headers = 0) BEGIN
        SET abil_num = 0
      END ELSE BEGIN
        READ_LONG   0x64 abil_off ELSE 0
        READ_SHORT  0x68 abil_num ELSE 0
      END
    END

    "ITM "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.1" = 0) BEGIN // pst, itm v1.1
        SET min_size       = 0x9a
      END ELSE BEGIN
        SET min_size       = 0x72
      END
      READ_LONG   0x6a fx_off   ELSE 0
      SET counter_offset = 0x70
      SET abil_length    = 0x38
      SET fx_type        = 0
      PATCH_IF (check_headers = 0) BEGIN
        SET abil_num = 0
      END ELSE BEGIN
        READ_LONG   0x64 abil_off ELSE 0
        READ_SHORT  0x68 abil_num ELSE 0
      END
    END

    "CRE "
    BEGIN
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V1.2" = 0) BEGIN // pst, cre v1.2
        SET min_size       = 0x378
        READ_LONG  0x368 fx_off ELSE 0
        SET counter_offset = 0x36c
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V2.2" = 0) BEGIN // iwd2, cre v2.2
        SET min_size       = 0x62e
        READ_LONG  0x61e fx_off ELSE 0
        SET counter_offset = 0x622
      END ELSE
      PATCH_IF ("%version%" STRING_COMPARE_CASE "V9.0" = 0) BEGIN // iwd, cre v9.0
        SET min_size       = 0x33c
        READ_LONG  0x32c fx_off ELSE 0
        SET counter_offset = 0x330
      END ELSE BEGIN                                               // everything else, cre v1.0
        SET min_size = 0x2d4
        READ_LONG  0x2c4 fx_off ELSE 0
        SET counter_offset = 0x2c8
      END
      SET abil_off = 0 // basically prevents the ability effect loop
      SET abil_num = 0
      SET abil_length = 0
      SET check_globals = 1
      READ_BYTE 0x33 fx_type ELSE 2
    END

    "fail"
    BEGIN
      PATCH_WARN "WARNING: ALTER_EFFECT_EX does not think %SOURCE_FILE% appears to be a valid file"
    END

    DEFAULT
      SET min_size = "-1" // kill macro as the file type is not recognized
      PATCH_WARN "WARNING: ALTER_EFFECT_EX does not support file type %sig%"
  END
  
  SPRINT o_SOURCE_FILE ~%SOURCE_FILE%~ // preserve original copy vars
  SPRINT o_SOURCE_RES  ~%SOURCE_RES%~
  SPRINT o_DEST_FILE   ~%DEST_FILE%~
  SPRINT o_DEST_RES    ~%DEST_RES%~
  INNER_ACTION BEGIN
  
<<<<<<<<./inline/alter_effect_ex_macro.tph

DEFINE_PATCH_MACRO alter_effect_ex_macro_working BEGIN

      PATCH_IF (((abil_type = header_type) OR (abil_type < 0) OR (header_type < 0)) AND // only look on the right header types, if specified...
                ((header = index) OR (header < 0))) BEGIN                               // and only on the right # header, if specified
        SET local_multi = multi_match
        FOR (index2 = 0 ; index2 < counter ; ++index2) BEGIN

          // read the variables from the current effect
          READ_SHORT (fx_off        + (0x08 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_opcode
          READ_BYTE  (fx_off + 0x02 + (0x0a * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_target
          READ_BYTE  (fx_off + 0x03 + (0x0d * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_power
          READ_LONG  (fx_off + 0x04 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter1
          READ_LONG  (fx_off + 0x08 + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_parameter2
          READ_BYTE  (fx_off + 0x0c + (0x10 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_timing
          READ_BYTE  (fx_off + 0x0d + (0x47 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resist_dispel
          READ_LONG  (fx_off + 0x0e + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_duration
          READ_BYTE  (fx_off + 0x12 + (0x12 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability1
          READ_BYTE  (fx_off + 0x13 + (0x13 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_probability2
          READ_ASCII (fx_off + 0x14 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_resource
          READ_LONG  (fx_off + 0x1c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicenumber
          READ_LONG  (fx_off + 0x20 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_dicesize
          READ_LONG  (fx_off + 0x24 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savingthrow
          READ_LONG  (fx_off + 0x28 + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_savebonus
          READ_LONG  (fx_off + 0x2c + (0x14 * fx_type) + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type)))) o_special

          // match ALL these variables, if specified
          PATCH_IF ((REPLACE_match_opcode_ex)        AND
                    (REPLACE_match_target_ex)        AND
                    (REPLACE_match_power_ex)         AND
                    (REPLACE_match_parameter1_ex)    AND
                    (REPLACE_match_parameter2_ex)    AND
                    (REPLACE_match_timing_ex)        AND
                    (REPLACE_match_resist_dispel_ex) AND
                    (REPLACE_match_duration_ex)      AND
                    (REPLACE_match_probability1_ex)  AND
                    (REPLACE_match_probability2_ex)  AND
                    (REPLACE_match_dicenumber_ex)    AND
                    (REPLACE_match_dicesize_ex)      AND
                    (REPLACE_match_savingthrow_ex)   AND
                    (REPLACE_match_savebonus_ex)     AND
                    (REPLACE_match_special_ex)       AND
                    (REPLACE_match_resource_ex))
          BEGIN

            // lazily re-use code
            SET base = (fx_off        + ((abil_fx_idx + index2) * (0x30 + (0xd8 * fx_type))))

            // overwrite the cloned effect with the new variables, if specified
            PATCH_IF ("%opcode_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base        + (0x08 * fx_type)) (REPLACE_opcode_ex)        END ELSE BEGIN 
            PATCH_IF (opcode >= 0)        BEGIN WRITE_SHORT (base        + (0x08 * fx_type)) opcode        END END 
            PATCH_IF ("%target_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x02 + (0x0a * fx_type)) (REPLACE_target_ex)        END ELSE BEGIN  
            PATCH_IF (target >= 0)        BEGIN WRITE_BYTE  (base + 0x02 + (0x0a * fx_type)) target        END END 
            PATCH_IF ("%power_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x03 + (0x0d * fx_type)) (REPLACE_power_ex)         END ELSE BEGIN
            PATCH_IF (power >= 0)         BEGIN WRITE_BYTE  (base + 0x03 + (0x0d * fx_type)) power         END END 
            PATCH_IF ("%parameter1_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x04 + (0x10 * fx_type)) (REPLACE_parameter1_ex)    END ELSE BEGIN
            PATCH_IF (parameter1 >= 0)    BEGIN WRITE_LONG  (base + 0x04 + (0x10 * fx_type)) parameter1    END END 
            PATCH_IF ("%parameter2_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x08 + (0x10 * fx_type)) (REPLACE_parameter2_ex)    END ELSE BEGIN
            PATCH_IF (parameter2 >= 0)    BEGIN WRITE_LONG  (base + 0x08 + (0x10 * fx_type)) parameter2    END END 
            PATCH_IF ("%timing_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0c + (0x10 * fx_type)) (REPLACE_timing_ex)        END ELSE BEGIN
            PATCH_IF (timing >= 0)        BEGIN WRITE_BYTE  (base + 0x0c + (0x10 * fx_type)) timing        END END 
            PATCH_IF ("%resist_dispel_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0d + (0x47 * fx_type)) (REPLACE_resist_dispel_ex) END ELSE BEGIN
            PATCH_IF (resist_dispel >= 0) BEGIN WRITE_BYTE  (base + 0x0d + (0x47 * fx_type)) resist_dispel END END 
            PATCH_IF ("%duration_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x0e + (0x12 * fx_type)) (REPLACE_duration_ex)      END ELSE BEGIN
            PATCH_IF (duration >= 0)      BEGIN WRITE_LONG  (base + 0x0e + (0x12 * fx_type)) duration      END END 
            PATCH_IF ("%probability1_ex%"  STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x12 + (0x12 * fx_type)) (REPLACE_probability1_ex)  END ELSE BEGIN
            PATCH_IF (probability1 >= 0)  BEGIN WRITE_BYTE  (base + 0x12 + (0x12 * fx_type)) probability1  END END 
            PATCH_IF ("%probability2_ex%"  STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x13 + (0x13 * fx_type)) (REPLACE_probability2_ex)  END ELSE BEGIN
            PATCH_IF (probability2 >= 0)  BEGIN WRITE_BYTE  (base + 0x13 + (0x13 * fx_type)) probability2  END END 
            PATCH_IF ("%dicenumber_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x1c + (0x14 * fx_type)) (REPLACE_dicenumber_ex)    END ELSE BEGIN
            PATCH_IF (dicenumber >= 0)    BEGIN WRITE_LONG  (base + 0x1c + (0x14 * fx_type)) dicenumber    END END 
            PATCH_IF ("%dicesize_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x20 + (0x14 * fx_type)) (REPLACE_dicesize_ex)      END ELSE BEGIN
            PATCH_IF (dicesize >= 0)      BEGIN WRITE_LONG  (base + 0x20 + (0x14 * fx_type)) dicesize      END END 
            PATCH_IF ("%savingthrow_ex%"   STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x24 + (0x14 * fx_type)) (REPLACE_savingthrow_ex)   END ELSE BEGIN
            PATCH_IF (savingthrow >= 0)   BEGIN WRITE_LONG  (base + 0x24 + (0x14 * fx_type)) savingthrow   END END 
            PATCH_IF ("%savebonus_ex%"     STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x28 + (0x14 * fx_type)) (REPLACE_savebonus_ex)     END ELSE BEGIN
            PATCH_IF (savebonus >= "-10") BEGIN WRITE_LONG  (base + 0x28 + (0x14 * fx_type)) savebonus     END END 
            PATCH_IF ("%special_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG  (base + 0x2c + (0x14 * fx_type)) (REPLACE_special_ex)       END ELSE BEGIN
            PATCH_IF (special >= 0)       BEGIN WRITE_LONG  (base + 0x2c + (0x14 * fx_type)) special       END END 
            
            PATCH_IF ("%resource_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_ASCIIE (base + 0x14 + (0x14 * fx_type)) REPLACE_resource_ex #8       END ELSE BEGIN
            PATCH_IF ("%resource%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_ASCIIE (base + 0x14 + (0x14 * fx_type)) "%resource%" #8 END END 

            // update the tracking vars
            SET alter += 1
            PATCH_IF (local_multi < 2) BEGIN  // kill loop if we only want one match
              SET index2 = counter
            END ELSE BEGIN // otherwise bump vars and keep going
              SET local_multi  -= 1
            END

          END // end patch_if for a matched effect
        END // end of the for loop through effects
      END // end patch_if for matched/specified headers

END
      
>>>>>>>>

    COPY ~./inline/alter_effect_ex_macro.tph~ ~./inline/alter_effect_ex_macro_working.tph~
      REPLACE_TEXTUALLY ~REPLACE_header_type_ex~         ~%header_type_ex%~
      REPLACE_TEXTUALLY ~REPLACE_match_opcode_ex~        ~%match_opcode_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_target_ex~        ~%match_target_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_power_ex~         ~%match_power_ex%~         
      REPLACE_TEXTUALLY ~REPLACE_match_parameter1_ex~    ~%match_parameter1_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_parameter2_ex~    ~%match_parameter2_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_timing_ex~        ~%match_timing_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_match_resist_dispel_ex~ ~%match_resist_dispel_ex%~ 
      REPLACE_TEXTUALLY ~REPLACE_match_duration_ex~      ~%match_duration_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_probability1_ex~  ~%match_probability1_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_probability2_ex~  ~%match_probability2_ex%~  
      REPLACE_TEXTUALLY ~REPLACE_match_dicenumber_ex~    ~%match_dicenumber_ex%~    
      REPLACE_TEXTUALLY ~REPLACE_match_dicesize_ex~      ~%match_dicesize_ex%~      
      REPLACE_TEXTUALLY ~REPLACE_match_savingthrow_ex~   ~%match_savingthrow_ex%~   
      REPLACE_TEXTUALLY ~REPLACE_match_savebonus_ex~     ~%match_savebonus_ex%~     
      REPLACE_TEXTUALLY ~REPLACE_match_special_ex~       ~%match_special_ex%~       
      REPLACE_TEXTUALLY ~REPLACE_opcode_ex~              ~%opcode_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_target_ex~              ~%target_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_power_ex~               ~%power_ex%~               
      REPLACE_TEXTUALLY ~REPLACE_parameter1_ex~          ~%parameter1_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_parameter2_ex~          ~%parameter2_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_timing_ex~              ~%timing_ex%~              
      REPLACE_TEXTUALLY ~REPLACE_resist_dispel_ex~       ~%resist_dispel_ex%~       
      REPLACE_TEXTUALLY ~REPLACE_duration_ex~            ~%duration_ex%~            
      REPLACE_TEXTUALLY ~REPLACE_probability1_ex~        ~%probability1_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_probability2_ex~        ~%probability2_ex%~        
      REPLACE_TEXTUALLY ~REPLACE_dicenumber_ex~          ~%dicenumber_ex%~          
      REPLACE_TEXTUALLY ~REPLACE_dicesize_ex~            ~%dicesize_ex%~            
      REPLACE_TEXTUALLY ~REPLACE_savingthrow_ex~         ~%savingthrow_ex%~         
      REPLACE_TEXTUALLY ~REPLACE_savebonus_ex~           ~%savebonus_ex%~           
      REPLACE_TEXTUALLY ~REPLACE_special_ex~             ~%special_ex%~             
      REPLACE_TEXTUALLY ~REPLACE_match_resource_ex~      ~%match_resource_ex%~
      REPLACE_TEXTUALLY ~REPLACE_resource_ex~            ~%resource_ex%~
      
      REINCLUDE ~./inline/alter_effect_ex_macro_working.tph~
  
  END // end INNER_ACTION
  
  SPRINT SOURCE_FILE ~%o_SOURCE_FILE%~ // reset copy vars
  SPRINT SOURCE_RES  ~%o_SOURCE_RES%~
  SPRINT DEST_FILE   ~%o_DEST_FILE%~
  SPRINT DEST_RES    ~%o_DEST_RES%~

  PATCH_IF (BUFFER_LENGTH >= min_size) BEGIN // sanity check
    FOR (index = (0 - check_globals) ; index < abil_num ; ++index) BEGIN // we start at -1 for global effects
      PATCH_IF (index < 0) BEGIN // if loop through globals needed
        SET abil_fx_idx = 0  // start with effect 0 since we're in the global loop
        SET abil_type = "-1" // basically, ignore header type checks for global loop
      END ELSE BEGIN // otherwise normal ability
        READ_BYTE   (abil_off +        (abil_length * index)) abil_type
        SET counter_offset = (abil_off + 0x1e + (abil_length * index))
        READ_SHORT  (abil_off + 0x20 + (abil_length * index)) abil_fx_idx
      END
      READ_SHORT counter_offset counter // fx_num on global loop, otherwise abil_fx_num
      LAUNCH_PATCH_MACRO alter_effect_ex_macro_working
    END // end loop through effects on ability
  END // end ability loop

  PATCH_IF (alter = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no effects altered on %SOURCE_FILE% via ALTER_EFFECT_EX"
  END

  PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %alter% effect(s) altered via ALTER_EFFECT_EX"
  END

END

/////                                                  \\\\\
///// ALTER_HEADER_EX                                  \\\\\
/////                                                  \\\\\

// got tired of crappy ALTER_ITEM_HEADER and ALTER_SPELL_HEADER
DEFINE_PATCH_FUNCTION ALTER_HEADER_EX

  // defines what we're going to check
  INT_VAR multi_match         = 999
          verbose             = 0
          silent              = 0
          header              = "-1"

  // variables for finding the effect to match
          match_type        = "-1"
          match_location    = "-1"
          match_target      = "-1"
          match_target_num  = "-1"
          match_range       = "-1"
          match_speed       = "-1"
          match_projectile  = "-1"
          // spell headers only
          match_level       = "-1"
          // item headers only
          match_identify       = "-1"
          match_alt_dicesize   = "-1"
          match_launcher       = "-1"
          match_alt_dicenumber = "-1"
          match_alt_damage     = "-1"
          match_to_hit         = "-1"
          match_dicesize       = "-1"
          match_primary        = "-1"
          match_dicenumber     = "-1"
          match_secondary      = "-1"
          match_damage         = "-1"
          match_damage_type    = "-1"
          match_charges        = "-1"
          match_drained        = "-1"
          match_overhand       = "-1"
          match_backhand       = "-1"
          match_thrust         = "-1"
          match_arrow          = "-1"
          match_bolt           = "-1"
          match_bullet         = "-1"
          // flags at 0x26 (still item only)
          match_flag_strength      = "-1" // add strength bonus, bit0
          match_flag_break         = "-1" // breakable, bit1
          match_flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          match_flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          match_flag_sanctuary     = "-1" // break sanctuary, bit9
          match_flag_hostile       = "-1" // hostile, bit10
          match_flag_recharge      = "-1" // recharge after resting, bit11
          match_flag_bypass        = "-1" // bypass armor, bit16
          match_flag_keenedge      = "-1" // keen edge, bit17
          match_flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          match_flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // variables for the new effect
          type        = "-1"
          location    = "-1"
          target      = "-1"
          target_num  = "-1"
          range       = "-1"
          speed       = "-1"
          projectile  = "-1"
          // spell headers only
          level       = "-1"
          // item headers only
          identify       = "-1"
          alt_dicesize   = "-1"
          launcher       = "-1"
          alt_dicenumber = "-1"
          alt_damage     = "-1"
          to_hit         = "-1"
          dicesize       = "-1"
          primary        = "-1"
          dicenumber     = "-1"
          secondary      = "-1"
          damage         = "-1"
          damage_type    = "-1"
          charges        = "-1"
          drained        = "-1"
          overhand       = "-1"
          backhand       = "-1"
          thrust         = "-1"
          arrow          = "-1"
          bolt           = "-1"
          bullet         = "-1"
          // flags at 0x26
          flag_strength      = "-1" // add strength bonus, bit0
          flag_break         = "-1" // breakable, bit1
          flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          flag_sanctuary     = "-1" // break sanctuary, bit9
          flag_hostile       = "-1" // hostile, bit10
          flag_recharge      = "-1" // recharge after resting, bit11
          flag_bypass        = "-1" // bypass armor, bit16
          flag_keenedge      = "-1" // keen edge, bit17
          flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // same for match and new STR_VAR
  STR_VAR match_icon      = "SAME"
          icon            = "SAME"
          
          header_ex            = ~((header < 0) OR (header = index))~
          
          match_type_ex        = ~((match_type       = o_type)       OR (match_type < 0))~
          match_location_ex    = ~((match_location   = o_location)   OR (match_location < 0))~
          match_target_ex      = ~((match_target     = o_target)     OR (match_target < 0))~
          match_target_num_ex  = ~((match_target_num = o_target_num) OR (match_target_num < 0))~
          match_range_ex       = ~((match_range      = o_range)      OR (match_range < 0))~
          match_speed_ex       = ~((match_speed      = o_speed)      OR (match_speed < 0))~
          match_projectile_ex  = ~((match_projectile = o_projectile) OR (match_projectile < 0))~
          match_icon_ex        = ~ (("%match_icon%" STRING_COMPARE_CASE "%o_icon%" = 0) OR ("%match_icon%" STRING_COMPARE_CASE "SAME" = 0))~
          // spell headers only
          match_level_ex       = ~((match_level = o_level) OR (match_level < 0))~
          // item headers only
          match_identify_ex       = ~((match_identify       = o_identify)       OR (match_identify < 0))~
          match_alt_dicesize_ex   = ~((match_alt_dicesize   = o_alt_dicesize)   OR (match_alt_dicesize < 0))~
          match_launcher_ex       = ~((match_launcher       = o_launcher)       OR (match_launcher < 0))~
          match_alt_dicenumber_ex = ~((match_alt_dicenumber = o_alt_dicenumber) OR (match_alt_dicenumber < 0))~
          match_alt_damage_ex     = ~((match_alt_damage     = o_alt_damage)     OR (match_alt_damage < 0))~
          match_to_hit_ex         = ~((match_to_hit         = o_to_hit)         OR (match_to_hit < 0))~
          match_dicesize_ex       = ~((match_dicesize       = o_dicesize)       OR (match_dicesize < 0))~
          match_primary_ex        = ~((match_primary        = o_primary)        OR (match_primary < 0))~
          match_dicenumber_ex     = ~((match_dicenumber     = o_dicenumber)     OR (match_dicenumber < 0))~
          match_secondary_ex      = ~((match_secondary      = o_secondary)      OR (match_secondary < 0))~
          match_damage_ex         = ~((match_damage         = o_damage)         OR (match_damage < 0))~
          match_damage_type_ex    = ~((match_damage_type    = o_damage_type)    OR (match_damage_type < 0))~
          match_charges_ex        = ~((match_charges        = o_charges)        OR (match_charges < 0))~
          match_drained_ex        = ~((match_drained        = o_drained)        OR (match_drained < 0))~
          match_overhand_ex       = ~((match_overhand       = o_overhand)       OR (match_overhand < 0))~
          match_backhand_ex       = ~((match_backhand       = o_backhand)       OR (match_backhand < 0))~
          match_thrust_ex         = ~((match_thrust         = o_thrust)         OR (match_thrust < 0))~
          match_arrow_ex          = ~((match_arrow          = o_arrow)          OR (match_arrow < 0))~
          match_bolt_ex           = ~((match_bolt           = o_bolt)           OR (match_bolt < 0)) ~
          match_bullet_ex         = ~((match_bullet         = o_bullet)         OR (match_bullet < 0))~
          // flags at 0x26 (still item only)
          match_flag_strength_ex      = ~((match_flag_strength < 0) OR (match_flag_strength = (flags & BIT0)) OR (match_flag_strength > 0 AND (flags & BIT0) = BIT0))~ // add strength bonus, bit0
          match_flag_break_ex         = ~((match_flag_break < 0) OR (match_flag_break = (flags & BIT1)) OR(match_flag_break > 0 AND (flags & BIT1) = BIT1))~ // breakable, bit1
          match_flag_str_damage_ex    = ~((match_flag_str_damage < 0) OR (match_flag_str_damage = (flags & BIT2)) OR (match_flag_str_damage > 0 AND (flags & BIT2) = BIT2))~ // strength damage bonus, ee, bit2
          match_flag_str_to_hit_ex    = ~((match_flag_str_to_hit < 0) OR (match_flag_str_to_hit = (flags & BIT3)) OR (match_flag_str_to_hit > 0 AND (flags & BIT3) = BIT3))~ // strength thac0 bonus, ee, bit3
          match_flag_sanctuary_ex     = ~((match_flag_sanctuary < 0) OR (match_flag_sanctuary = (flags & BIT9)) OR (match_flag_sanctuary > 0 AND (flags & BIT9) = BIT9))~ // break sanctuary, bit9
          match_flag_hostile_ex       = ~((match_flag_hostile < 0) OR (match_flag_hostile = (flags & BIT10)) OR (match_flag_hostile > 0 AND (flags & BIT10) = BIT10))~ // hostile, bit10
          match_flag_recharge_ex      = ~((match_flag_recharge < 0) OR (match_flag_recharge = (flags & BIT11)) OR (match_flag_recharge > 0 AND (flags & BIT11) = BIT11))~ // recharge after resting, bit11
          match_flag_bypass_ex        = ~((match_flag_bypass < 0) OR (match_flag_bypass = (flags & BIT16)) OR (match_flag_bypass > 0 AND (flags & BIT16) = BIT16))~ // bypass armor, bit16
          match_flag_keenedge_ex      = ~((match_flag_keenedge < 0) OR (match_flag_keenedge = (flags & BIT17)) OR (match_flag_keenedge > 0 AND (flags & BIT17) = BIT17))~ // keen edge, bit17
          match_flag_backstab_ex      = ~((match_flag_backstab < 0) OR (match_flag_backstab = (flags & BIT25)) OR (match_flag_backstab > 0 AND (flags & BIT25) = BIT25))~ // tobex only, toggle backstab, bit25
          match_flag_noinvisible_ex   = ~((match_flag_noinvisible < 0) OR (match_flag_noinvisible = (flags & BIT26)) OR (match_flag_noinvisible > 0 AND (flags & BIT26) = BIT26))~ // tobex only, cannot target invisible, bit26
          
          type_ex        = "SAME"
          location_ex    = "SAME"
          target_ex      = "SAME"
          target_num_ex  = "SAME"
          range_ex       = "SAME"
          speed_ex       = "SAME"
          projectile_ex  = "SAME"
          icon_ex        = "SAME"
          // spell headers only
          level_ex       = "SAME"
          // item headers only
          identify_ex       = "SAME"
          alt_dicesize_ex   = "SAME"
          launcher_ex       = "SAME"
          alt_dicenumber_ex = "SAME"
          alt_damage_ex     = "SAME"
          to_hit_ex         = "SAME"
          dicesize_ex       = "SAME"
          primary_ex        = "SAME"
          dicenumber_ex     = "SAME"
          secondary_ex      = "SAME"
          damage_ex         = "SAME"
          damage_type_ex    = "SAME"
          charges_ex        = "SAME"
          drained_ex        = "SAME"
          overhand_ex       = "SAME"
          backhand_ex       = "SAME"
          thrust_ex         = "SAME"
          arrow_ex          = "SAME"
          bolt_ex           = "SAME"
          bullet_ex         = "SAME"
          // flags at 0x26
          flags_ex      = "SAME" // add strength bonus, bit0
BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0
  SET proceed = 0
  SET alter = 0
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END ELSE
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "SPL" = 0) BEGIN
    SET abil_length = 0x28
  END
  PATCH_IF abil_length = 0 BEGIN
    PATCH_WARN ~WARNING: file type not recognized on %SOURCE_FILE% for ALTER_HEADER_EX macro.~
  END ELSE BEGIN
  
    SPRINT o_SOURCE_FILE ~%SOURCE_FILE%~ // preserve original copy vars
    SPRINT o_SOURCE_RES  ~%SOURCE_RES%~
    SPRINT o_DEST_FILE   ~%DEST_FILE%~
    SPRINT o_DEST_RES    ~%DEST_RES%~
    INNER_ACTION BEGIN
  
<<<<<<<<./inline/alter_header_ex_macro.tph

DEFINE_PATCH_MACRO alter_header_ex_macro_working BEGIN

      PATCH_IF (REPLACE_header_ex) BEGIN
        SET base = abil_off + (index * abil_length)
        READ_BYTE  (base + 0x00) o_type
        READ_BYTE  (base + 0x02) o_location
        READ_ASCII (base + 0x04) o_icon (8) NULL
        READ_BYTE  (base + 0x0c) o_target
        READ_BYTE  (base + 0x0d) o_target_num
        READ_SHORT (base + 0x0e) o_range
        READ_SHORT (base + pro_off) o_projectile
        PATCH_IF abil_length = 0x38 BEGIN
          // item headers only
          READ_BYTE  (base + 0x01) o_identify
          READ_BYTE  (base + 0x03) o_alt_dicesize
          READ_BYTE  (base + 0x10) o_launcher
          READ_BYTE  (base + 0x11) o_alt_dicenumber
          READ_BYTE  (base + 0x12) o_speed
          READ_BYTE  (base + 0x13) o_alt_damage
          READ_SHORT (base + 0x14) o_to_hit
          READ_BYTE  (base + 0x16) o_dicesize
          READ_BYTE  (base + 0x17) o_primary
          READ_BYTE  (base + 0x18) o_dicenumber
          READ_BYTE  (base + 0x19) o_secondary
          READ_SHORT (base + 0x1a) o_damage
          READ_SHORT (base + 0x1c) o_damage_type
          READ_SHORT (base + 0x22) o_charges
          READ_SHORT (base + 0x24) o_drained
          READ_LONG  (base + 0x26) o_flags
          READ_SHORT (base + 0x2c) o_overhand
          READ_SHORT (base + 0x2e) o_backhand
          READ_SHORT (base + 0x30) o_thrust
          READ_SHORT (base + 0x32) o_arrow
          READ_SHORT (base + 0x34) o_bolt
          READ_SHORT (base + 0x36) o_bullet
        END ELSE BEGIN
          READ_SHORT (base + 0x10) o_level
          READ_SHORT (base + 0x12) o_speed
        END
        // now check our header vs. the match variables
        PATCH_IF ((multi_match != 0) AND
                  (REPLACE_match_type_ex)       AND
                  (REPLACE_match_location_ex)   AND
                  (REPLACE_match_target_ex)     AND
                  (REPLACE_match_target_num_ex) AND
                  (REPLACE_match_range_ex)      AND
                  (REPLACE_match_speed_ex)      AND
                  (REPLACE_match_projectile_ex) AND
                  (REPLACE_match_icon_ex)) 
        BEGIN
          PATCH_IF (abil_length = 0x38) BEGIN  // item-specific checks
            PATCH_IF ((REPLACE_match_identify_ex)       AND
                      (REPLACE_match_alt_dicesize_ex)   AND
                      (REPLACE_match_launcher_ex)       AND
                      (REPLACE_match_alt_dicenumber_ex) AND
                      (REPLACE_match_alt_damage_ex)     AND
                      (REPLACE_match_to_hit_ex)         AND
                      (REPLACE_match_dicesize_ex)       AND
                      (REPLACE_match_primary_ex)        AND
                      (REPLACE_match_dicenumber_ex)     AND
                      (REPLACE_match_secondary_ex)      AND
                      (REPLACE_match_damage_ex)         AND
                      (REPLACE_match_damage_type_ex)    AND
                      (REPLACE_match_charges_ex)        AND
                      (REPLACE_match_drained_ex)        AND
                      (REPLACE_match_overhand_ex)       AND
                      (REPLACE_match_backhand_ex)       AND
                      (REPLACE_match_thrust_ex)         AND
                      (REPLACE_match_arrow_ex)          AND
                      (REPLACE_match_bolt_ex)           AND
                      (REPLACE_match_bullet_ex)         AND
                      (REPLACE_match_flag_strength_ex) AND
                      (REPLACE_match_flag_break_ex) AND
                      (REPLACE_match_flag_str_damage_ex) AND
                      (REPLACE_match_flag_str_to_hit_ex) AND
                      (REPLACE_match_flag_sanctuary_ex) AND
                      (REPLACE_match_flag_hostile_ex) AND
                      (REPLACE_match_flag_recharge_ex) AND
                      (REPLACE_match_flag_bypass_ex) AND
                      (REPLACE_match_flag_keenedge_ex) AND
                      (REPLACE_match_flag_backstab_ex) AND
                      (REPLACE_match_flag_noinvisible_ex)) BEGIN
              SET proceed = 1
            END
          END ELSE BEGIN // spell-specific checks
            PATCH_IF (REPLACE_match_level_ex) BEGIN
              SET proceed = 1
            END
          END
          PATCH_IF proceed BEGIN
            SET alter += 1
            SET multi_match -= 1
            PATCH_IF ("%type_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x00) (REPLACE_type_ex)          END ELSE BEGIN 
            PATCH_IF (type >= 0)       BEGIN WRITE_BYTE  (base + 0x00) type END END             
            PATCH_IF ("%location_ex%"   STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x02) (REPLACE_location_ex)      END ELSE BEGIN 
            PATCH_IF (location >= 0)   BEGIN WRITE_BYTE  (base + 0x02) location END END 
            PATCH_IF ("%target_ex%"     STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0c) (REPLACE_target_ex)        END ELSE BEGIN 
            PATCH_IF (target >= 0)     BEGIN WRITE_BYTE  (base + 0x0c) target END END 
            PATCH_IF ("%target_num_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x0d) (REPLACE_target_num_ex)    END ELSE BEGIN 
            PATCH_IF (target_num >= 0) BEGIN WRITE_BYTE  (base + 0x0d) target_num END END 
            PATCH_IF ("%range_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x0e) (REPLACE_range_ex)         END ELSE BEGIN 
            PATCH_IF (range >= 0)      BEGIN WRITE_SHORT (base + 0x0e) range END END 
            PATCH_IF ("%projectile_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + pro_off) (REPLACE_projectile_ex) END ELSE BEGIN             
            PATCH_IF (projectile >= 0) BEGIN WRITE_SHORT (base + pro_off) projectile END END 
            
            PATCH_IF ("%icon_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_ASCIIE (base + 0x04) REPLACE_icon_ex #8         END ELSE BEGIN   
            PATCH_IF ("%icon%" STRING_COMPARE_CASE "SAME") BEGIN WRITE_ASCIIE (base + 0x04) ~%icon%~ #8 END END
            
            PATCH_IF abil_length = 0x38 BEGIN // item headers
              PATCH_IF ("%identify_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x01) (REPLACE_identify_ex)       END ELSE BEGIN 
              PATCH_IF (identify >= 0)       BEGIN WRITE_BYTE  (base + 0x01) identify       END END
              PATCH_IF ("%alt_dicesize_ex%"   STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x03) (REPLACE_alt_dicesize_ex)   END ELSE BEGIN 
              PATCH_IF (alt_dicesize >= 0)   BEGIN WRITE_BYTE  (base + 0x03) alt_dicesize   END END
              PATCH_IF ("%launcher_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x10) (REPLACE_launcher_ex)       END ELSE BEGIN 
              PATCH_IF (launcher >= 0)       BEGIN WRITE_BYTE  (base + 0x10) launcher       END END
              PATCH_IF ("%alt_dicenumber_ex%" STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x11) (REPLACE_alt_dicenumber_ex) END ELSE BEGIN 
              PATCH_IF (alt_dicenumber >= 0) BEGIN WRITE_BYTE  (base + 0x11) alt_dicenumber END END
              PATCH_IF ("%speed_ex%"          STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x12) (REPLACE_speed_ex)          END ELSE BEGIN 
              PATCH_IF (speed >= 0)          BEGIN WRITE_BYTE  (base + 0x12) speed          END END
              PATCH_IF ("%alt_damage_ex%"     STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x13) (REPLACE_alt_damage_ex)     END ELSE BEGIN 
              PATCH_IF (alt_damage >= 0)     BEGIN WRITE_BYTE  (base + 0x13) alt_damage     END END
              PATCH_IF ("%to_hit_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x14) (REPLACE_to_hit_ex)         END ELSE BEGIN 
              PATCH_IF (to_hit >= 0)         BEGIN WRITE_SHORT (base + 0x14) to_hit         END END
              PATCH_IF ("%dicesize_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x16) (REPLACE_dicesize_ex)       END ELSE BEGIN 
              PATCH_IF (dicesize >= 0)       BEGIN WRITE_BYTE  (base + 0x16) dicesize       END END
              PATCH_IF ("%primary_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x17) (REPLACE_primary_ex)        END ELSE BEGIN 
              PATCH_IF (primary >= 0)        BEGIN WRITE_BYTE  (base + 0x17) primary        END END
              PATCH_IF ("%dicenumber_ex%"     STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x18) (REPLACE_dicenumber_ex)     END ELSE BEGIN 
              PATCH_IF (dicenumber >= 0)     BEGIN WRITE_BYTE  (base + 0x18) dicenumber     END END
              PATCH_IF ("%secondary_ex%"      STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_BYTE  (base + 0x19) (REPLACE_secondary_ex)      END ELSE BEGIN 
              PATCH_IF (secondary >= 0)      BEGIN WRITE_BYTE  (base + 0x19) secondary      END END
              PATCH_IF ("%damage_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x1a) (REPLACE_damage_ex)         END ELSE BEGIN 
              PATCH_IF (damage >= 0)         BEGIN WRITE_SHORT (base + 0x1a) damage         END END
              PATCH_IF ("%damage_type_ex%"    STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x1c) (REPLACE_damage_type_ex)    END ELSE BEGIN 
              PATCH_IF (damage_type >= 0)    BEGIN WRITE_SHORT (base + 0x1c) damage_type    END END
              PATCH_IF ("%charges_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x22) (REPLACE_charges_ex)        END ELSE BEGIN 
              PATCH_IF (charges >= 0)        BEGIN WRITE_SHORT (base + 0x22) charges        END END
              PATCH_IF ("%drained_ex%"        STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x24) (REPLACE_drained_ex)        END ELSE BEGIN 
              PATCH_IF (drained >= 0)        BEGIN WRITE_SHORT (base + 0x24) drained        END END
              PATCH_IF ("%overhand_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x2c) (REPLACE_overhand_ex)       END ELSE BEGIN 
              PATCH_IF (overhand >= 0)       BEGIN WRITE_SHORT (base + 0x2c) overhand       END END
              PATCH_IF ("%backhand_ex%"       STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x2e) (REPLACE_backhand_ex)       END ELSE BEGIN 
              PATCH_IF (backhand >= 0)       BEGIN WRITE_SHORT (base + 0x2e) backhand       END END
              PATCH_IF ("%thrust_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x30) (REPLACE_thrust_ex)         END ELSE BEGIN 
              PATCH_IF (thrust >= 0)         BEGIN WRITE_SHORT (base + 0x30) thrust         END END
              PATCH_IF ("%arrow_ex%"          STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x32) (REPLACE_arrow_ex)          END ELSE BEGIN 
              PATCH_IF (arrow >= 0)          BEGIN WRITE_SHORT (base + 0x32) arrow          END END
              PATCH_IF ("%bolt_ex%"           STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x34) (REPLACE_bolt_ex)           END ELSE BEGIN 
              PATCH_IF (bolt >= 0)           BEGIN WRITE_SHORT (base + 0x34) bolt           END END
              PATCH_IF ("%bullet_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x36) (REPLACE_bullet_ex)         END ELSE BEGIN 
              PATCH_IF (bullet >= 0)         BEGIN WRITE_SHORT (base + 0x36) bullet         END END
              PATCH_IF ("%flags_ex%"         STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_LONG (base + 0x26) (REPLACE_flags_ex)         END ELSE BEGIN 
                PATCH_IF (flag_strength = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT0)  END
                PATCH_IF (flag_strength > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT0)  END
                PATCH_IF (flag_break = 0)       BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT1)  END
                PATCH_IF (flag_break > 0)       BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT1)  END
                PATCH_IF (flag_str_damage = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT2)  END
                PATCH_IF (flag_str_damage > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT2)  END
                PATCH_IF (flag_str_to_hit = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT3)  END
                PATCH_IF (flag_str_to_hit > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT3)  END
                PATCH_IF (flag_hostile = 0)     BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT10) END
                PATCH_IF (flag_hostile > 0)     BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT10) END
                PATCH_IF (flag_recharge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT11) END
                PATCH_IF (flag_recharge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT11) END
                PATCH_IF (flag_bypass = 0)      BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT16) END
                PATCH_IF (flag_bypass > 0)      BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT16) END
                PATCH_IF (flag_keenedge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT17) END
                PATCH_IF (flag_keenedge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT17) END
                PATCH_IF (flag_backstab = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT25) END
                PATCH_IF (flag_backstab > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT25) END
                PATCH_IF (flag_noinvisible = 0) BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT26) END
                PATCH_IF (flag_noinvisible > 0) BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT26) END
              END  
            END ELSE BEGIN // spell headers
              PATCH_IF ("%level_ex%"           STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x10) (REPLACE_level_ex) END ELSE BEGIN 
              PATCH_IF (level >= 0) BEGIN WRITE_SHORT (base + 0x10) level END END
              PATCH_IF ("%speed_ex%"           STRING_COMPARE_CASE "SAME" != 0) BEGIN WRITE_SHORT (base + 0x12) (REPLACE_speed_ex) END ELSE BEGIN 
              PATCH_IF (speed >= 0) BEGIN WRITE_SHORT (base + 0x12) speed END END
            END
          END // proceed check
        END // mutual fields check
      END // header check
      
END
      
>>>>>>>>

      COPY ~./inline/alter_header_ex_macro.tph~ ~./inline/alter_header_ex_macro_working.tph~
        REPLACE_TEXTUALLY ~REPLACE_header_ex~                 ~%header_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_type_ex~             ~%match_type_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_location_ex~         ~%match_location_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_target_ex~           ~%match_target_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_target_num_ex~       ~%match_target_num_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_range_ex~            ~%match_range_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_speed_ex~            ~%match_speed_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_projectile_ex~       ~%match_projectile_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_icon_ex~             ~%match_icon_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_level_ex~            ~%match_level_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_identify_ex~         ~%match_identify_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_alt_dicesize_ex~     ~%match_alt_dicesize_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_launcher_ex~         ~%match_launcher_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_alt_dicenumber_ex~   ~%match_alt_dicenumber_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_alt_damage_ex~       ~%match_alt_damage_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_to_hit_ex~           ~%match_to_hit_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_dicesize_ex~         ~%match_dicesize_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_primary_ex~          ~%match_primary_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_dicenumber_ex~       ~%match_dicenumber_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_secondary_ex~        ~%match_secondary_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_damage_ex~           ~%match_damage_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_damage_type_ex~      ~%match_damage_type_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_charges_ex~          ~%match_charges_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_drained_ex~          ~%match_drained_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_overhand_ex~         ~%match_overhand_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_backhand_ex~         ~%match_backhand_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_thrust_ex~           ~%match_thrust_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_arrow_ex~            ~%match_arrow_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_bolt_ex~             ~%match_bolt_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_bullet_ex~           ~%match_bullet_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_strength_ex~    ~%match_flag_strength_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_break_ex~       ~%match_flag_break_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_str_damage_ex~  ~%match_flag_str_damage_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_str_to_hit_ex~  ~%match_flag_str_to_hit_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_sanctuary_ex~   ~%match_flag_sanctuary_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_hostile_ex~     ~%match_flag_hostile_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_recharge_ex~    ~%match_flag_recharge_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_bypass_ex~      ~%match_flag_bypass_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_keenedge_ex~    ~%match_flag_keenedge_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_backstab_ex~    ~%match_flag_backstab_ex%~
        REPLACE_TEXTUALLY ~REPLACE_match_flag_noinvisible_ex~ ~%match_flag_noinvisible_ex%~
        REPLACE_TEXTUALLY ~REPLACE_type_ex~                   ~%type_ex%~
        REPLACE_TEXTUALLY ~REPLACE_location_ex~               ~%location_ex%~
        REPLACE_TEXTUALLY ~REPLACE_target_ex~                 ~%target_ex%~
        REPLACE_TEXTUALLY ~REPLACE_target_num_ex~             ~%target_num_ex%~
        REPLACE_TEXTUALLY ~REPLACE_range_ex~                  ~%range_ex%~
        REPLACE_TEXTUALLY ~REPLACE_speed_ex~                  ~%speed_ex%~
        REPLACE_TEXTUALLY ~REPLACE_projectile_ex~             ~%projectile_ex%~
        REPLACE_TEXTUALLY ~REPLACE_icon_ex~                   ~%icon_ex%~
        REPLACE_TEXTUALLY ~REPLACE_level_ex~                  ~%level_ex%~
        REPLACE_TEXTUALLY ~REPLACE_identify_ex~               ~%identify_ex%~
        REPLACE_TEXTUALLY ~REPLACE_alt_dicesize_ex~           ~%alt_dicesize_ex%~
        REPLACE_TEXTUALLY ~REPLACE_launcher_ex~               ~%launcher_ex%~
        REPLACE_TEXTUALLY ~REPLACE_alt_dicenumber_ex~         ~%alt_dicenumber_ex%~
        REPLACE_TEXTUALLY ~REPLACE_alt_damage_ex~             ~%alt_damage_ex%~
        REPLACE_TEXTUALLY ~REPLACE_to_hit_ex~                 ~%to_hit_ex%~
        REPLACE_TEXTUALLY ~REPLACE_dicesize_ex~               ~%dicesize_ex%~
        REPLACE_TEXTUALLY ~REPLACE_primary_ex~                ~%primary_ex%~
        REPLACE_TEXTUALLY ~REPLACE_dicenumber_ex~             ~%dicenumber_ex%~
        REPLACE_TEXTUALLY ~REPLACE_secondary_ex~              ~%secondary_ex%~
        REPLACE_TEXTUALLY ~REPLACE_damage_ex~                 ~%damage_ex%~
        REPLACE_TEXTUALLY ~REPLACE_damage_type_ex~            ~%damage_type_ex%~
        REPLACE_TEXTUALLY ~REPLACE_charges_ex~                ~%charges_ex%~
        REPLACE_TEXTUALLY ~REPLACE_drained_ex~                ~%drained_ex%~
        REPLACE_TEXTUALLY ~REPLACE_overhand_ex~               ~%overhand_ex%~
        REPLACE_TEXTUALLY ~REPLACE_backhand_ex~               ~%backhand_ex%~
        REPLACE_TEXTUALLY ~REPLACE_thrust_ex~                 ~%thrust_ex%~
        REPLACE_TEXTUALLY ~REPLACE_arrow_ex~                  ~%arrow_ex%~
        REPLACE_TEXTUALLY ~REPLACE_bolt_ex~                   ~%bolt_ex%~
        REPLACE_TEXTUALLY ~REPLACE_bullet_ex~                 ~%bullet_ex%~
        REPLACE_TEXTUALLY ~REPLACE_flags_ex~                  ~%flags_ex%~
        
        REINCLUDE ~./inline/alter_header_ex_macro_working.tph~
    
    END // end INNER_ACTION
  
    SPRINT SOURCE_FILE ~%o_SOURCE_FILE%~ // reset copy vars
    SPRINT SOURCE_RES  ~%o_SOURCE_RES%~
    SPRINT DEST_FILE   ~%o_DEST_FILE%~
    SPRINT DEST_RES    ~%o_DEST_RES%~
  
    SET pro_off = abil_length = 0x38 ? 0x2a : 0x26
    READ_LONG   0x64 abil_off
    READ_SHORT  0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      LAUNCH_PATCH_MACRO alter_header_ex_macro_working
    END // for loop
  END // abil_length check

  PATCH_IF (alter = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no headers altered on %SOURCE_FILE% via ALTER_HEADER_EX"
  END

  PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %alter% header(s) altered via ALTER_HEADER_EX"
  END

END

/////                                                  \\\\\
///// alter_header                                     \\\\\
/////                                                  \\\\\

// got tired of crappy ALTER_ITEM_HEADER and ALTER_SPELL_HEADER
DEFINE_PATCH_FUNCTION ALTER_HEADER

  // defines what we're going to check
  INT_VAR multi_match         = 999
          verbose             = 0
          silent              = 0
          header              = "-1"

  // variables for finding the effect to match
          match_type        = "-1"
          match_location    = "-1"
          match_target      = "-1"
          match_target_num  = "-1"
          match_range       = "-1"
          match_speed       = "-1"
          match_projectile  = "-1"
          // spell headers only
          match_level       = "-1"
          // item headers only
          match_identify       = "-1"
          match_alt_dicesize   = "-1"
          match_launcher       = "-1"
          match_alt_dicenumber = "-1"
          match_alt_damage     = "-1"
          match_to_hit         = "-1"
          match_dicesize       = "-1"
          match_primary        = "-1"
          match_dicenumber     = "-1"
          match_secondary      = "-1"
          match_damage         = "-1"
          match_damage_type    = "-1"
          match_charges        = "-1"
          match_drained        = "-1"
          match_overhand       = "-1"
          match_backhand       = "-1"
          match_thrust         = "-1"
          match_arrow          = "-1"
          match_bolt           = "-1"
          match_bullet         = "-1"
          // flags at 0x26 (still item only)
          match_flag_strength      = "-1" // add strength bonus, bit0
          match_flag_break         = "-1" // breakable, bit1
          match_flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          match_flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          match_flag_sanctuary     = "-1" // break sanctuary, bit9
          match_flag_hostile       = "-1" // hostile, bit10
          match_flag_recharge      = "-1" // recharge after resting, bit11
          match_flag_bypass        = "-1" // bypass armor, bit16
          match_flag_keenedge      = "-1" // keen edge, bit17
          match_flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          match_flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // variables for the new effect
          type        = "-1"
          location    = "-1"
          target      = "-1"
          target_num  = "-1"
          range       = "-1"
          speed       = "-1"
          projectile  = "-1"
          // spell headers only
          level       = "-1"
          // item headers only
          identify       = "-1"
          alt_dicesize   = "-1"
          launcher       = "-1"
          alt_dicenumber = "-1"
          alt_damage     = "-1"
          to_hit         = "-1"
          dicesize       = "-1"
          primary        = "-1"
          dicenumber     = "-1"
          secondary      = "-1"
          damage         = "-1"
          damage_type    = "-1"
          charges        = "-1"
          drained        = "-1"
          overhand       = "-1"
          backhand       = "-1"
          thrust         = "-1"
          arrow          = "-1"
          bolt           = "-1"
          bullet         = "-1"
          // flags at 0x26
          flag_strength      = "-1" // add strength bonus, bit0
          flag_break         = "-1" // breakable, bit1
          flag_str_damage    = "-1" // strength damage bonus, ee, bit2
          flag_str_to_hit    = "-1" // strength thac0 bonus, ee, bit3
          flag_sanctuary     = "-1" // break sanctuary, bit9
          flag_hostile       = "-1" // hostile, bit10
          flag_recharge      = "-1" // recharge after resting, bit11
          flag_bypass        = "-1" // bypass armor, bit16
          flag_keenedge      = "-1" // keen edge, bit17
          flag_backstab      = "-1" // tobex only, toggle backstab, bit25
          flag_noinvisible   = "-1" // tobex only, cannot target invisible, bit26

  // same for match and new STR_VAR
  STR_VAR match_icon      = "SAME"
          icon            = "SAME"
BEGIN

  READ_ASCII 0x00 sig (3)
  SET abil_length = 0
  SET proceed = 0
  SET alter = 0
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "ITM" = 0) BEGIN
    SET abil_length = 0x38
  END ELSE
  PATCH_IF ("%sig%" STRING_COMPARE_CASE "SPL" = 0) BEGIN
    SET abil_length = 0x28
  END
  PATCH_IF abil_length = 0 BEGIN
    PATCH_WARN ~WARNING: file type not recognized on %SOURCE_FILE% for ALTER_HEADER macro.~
  END ELSE BEGIN
    SET pro_off = abil_length = 0x38 ? 0x2a : 0x26
    READ_LONG   0x64 abil_off
    READ_SHORT  0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      PATCH_IF ((header < 0) OR (header = index)) BEGIN
        SET base = abil_off + (index * abil_length)
        READ_BYTE  (base + 0x00) o_type
        READ_BYTE  (base + 0x02) o_location
        READ_ASCII (base + 0x04) o_icon (8) NULL
        READ_BYTE  (base + 0x0c) o_target
        READ_BYTE  (base + 0x0d) o_target_num
        READ_SHORT (base + 0x0e) o_range
        READ_SHORT (base + pro_off) o_projectile
        PATCH_IF abil_length = 0x38 BEGIN
          // item headers only
          READ_BYTE  (base + 0x01) o_identify
          READ_BYTE  (base + 0x03) o_alt_dicesize
          READ_BYTE  (base + 0x10) o_launcher
          READ_BYTE  (base + 0x11) o_alt_dicenumber
          READ_BYTE  (base + 0x12) o_speed
          READ_BYTE  (base + 0x13) o_alt_damage
          READ_SHORT (base + 0x14) o_to_hit
          READ_BYTE  (base + 0x16) o_dicesize
          READ_BYTE  (base + 0x17) o_primary
          READ_BYTE  (base + 0x18) o_dicenumber
          READ_BYTE  (base + 0x19) o_secondary
          READ_SHORT (base + 0x1a) o_damage
          READ_SHORT (base + 0x1c) o_damage_type
          READ_SHORT (base + 0x22) o_charges
          READ_SHORT (base + 0x24) o_drained
          READ_LONG  (base + 0x26) o_flags
          READ_SHORT (base + 0x2c) o_overhand
          READ_SHORT (base + 0x2e) o_backhand
          READ_SHORT (base + 0x30) o_thrust
          READ_SHORT (base + 0x32) o_arrow
          READ_SHORT (base + 0x34) o_bolt
          READ_SHORT (base + 0x36) o_bullet
        END ELSE BEGIN
          READ_SHORT (base + 0x10) o_level
          READ_SHORT (base + 0x12) o_speed
        END
        // now check our header vs. the match variables
        PATCH_IF ((multi_match != 0) AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_type       = o_type)       OR (match_type < 0))       AND
                  ((match_location   = o_location)   OR (match_location < 0))   AND
                  ((match_target     = o_target)     OR (match_target < 0))     AND
                  ((match_target_num = o_target_num) OR (match_target_num < 0)) AND
                  ((match_range      = o_range)      OR (match_range < 0))      AND
                  ((match_speed      = o_speed)      OR (match_speed < 0))      AND
                  ((match_projectile = o_projectile) OR (match_projectile < 0)) AND
                  (("%match_icon%" STRING_COMPARE_CASE "%o_icon%" = 0) OR ("%match_icon%" STRING_COMPARE_CASE "SAME" = 0))) BEGIN
          PATCH_IF (abil_length = 0x38) BEGIN  // item-specific checks
            PATCH_IF (((match_identify       = o_identify)       OR (match_identify < 0))       AND
                      ((match_alt_dicesize   = o_alt_dicesize)   OR (match_alt_dicesize < 0))   AND
                      ((match_launcher       = o_launcher)       OR (match_launcher < 0))       AND
                      ((match_alt_dicenumber = o_alt_dicenumber) OR (match_alt_dicenumber < 0)) AND
                      ((match_alt_damage     = o_alt_damage)     OR (match_alt_damage < 0))     AND
                      ((match_to_hit         = o_to_hit)         OR (match_to_hit < 0))         AND
                      ((match_dicesize       = o_dicesize)       OR (match_dicesize < 0))       AND
                      ((match_primary        = o_primary)        OR (match_primary < 0))        AND
                      ((match_dicenumber     = o_dicenumber)     OR (match_dicenumber < 0))     AND
                      ((match_secondary      = o_secondary)      OR (match_secondary < 0))      AND
                      ((match_damage         = o_damage)         OR (match_damage < 0))         AND
                      ((match_damage_type    = o_damage_type)    OR (match_damage_type < 0))    AND
                      ((match_charges        = o_charges)        OR (match_charges < 0))        AND
                      ((match_drained        = o_drained)        OR (match_drained < 0))        AND
                      ((match_overhand       = o_overhand)       OR (match_overhand < 0))       AND
                      ((match_backhand       = o_backhand)       OR (match_backhand < 0))       AND
                      ((match_thrust         = o_thrust)         OR (match_thrust < 0))         AND
                      ((match_arrow          = o_arrow)          OR (match_arrow < 0))          AND
                      ((match_bolt           = o_bolt)           OR (match_bolt < 0))           AND
                      ((match_bullet         = o_bullet)         OR (match_bullet < 0))         AND
                      ((match_flag_strength < 0) OR
                       (match_flag_strength = (flags & BIT0)) OR // not set
                       (match_flag_strength > 0 AND (flags & BIT0) = BIT0)) AND
                      ((match_flag_break < 0) OR
                       (match_flag_break = (flags & BIT1)) OR // not set
                       (match_flag_break > 0 AND (flags & BIT1) = BIT1)) AND
                      ((match_flag_str_damage < 0) OR
                       (match_flag_str_damage = (flags & BIT2)) OR // not set
                       (match_flag_str_damage > 0 AND (flags & BIT2) = BIT2)) AND
                      ((match_flag_str_to_hit < 0) OR
                       (match_flag_str_to_hit = (flags & BIT3)) OR // not set
                       (match_flag_str_to_hit > 0 AND (flags & BIT3) = BIT3)) AND
                      ((match_flag_sanctuary < 0) OR
                       (match_flag_sanctuary = (flags & BIT9)) OR // not set
                       (match_flag_sanctuary > 0 AND (flags & BIT9) = BIT9)) AND
                      ((match_flag_hostile < 0) OR
                       (match_flag_hostile = (flags & BIT10)) OR // not set
                       (match_flag_hostile > 0 AND (flags & BIT10) = BIT10)) AND
                      ((match_flag_recharge < 0) OR
                       (match_flag_recharge = (flags & BIT11)) OR // not set
                       (match_flag_recharge > 0 AND (flags & BIT11) = BIT11)) AND
                      ((match_flag_bypass < 0) OR
                       (match_flag_bypass = (flags & BIT16)) OR // not set
                       (match_flag_bypass > 0 AND (flags & BIT16) = BIT16)) AND
                      ((match_flag_keenedge < 0) OR
                       (match_flag_keenedge = (flags & BIT17)) OR // not set
                       (match_flag_keenedge > 0 AND (flags & BIT17) = BIT17)) AND
                      ((match_flag_backstab < 0) OR
                       (match_flag_backstab = (flags & BIT25)) OR // not set
                       (match_flag_backstab > 0 AND (flags & BIT25) = BIT25)) AND
                      ((match_flag_noinvisible < 0) OR
                       (match_flag_noinvisible = (flags & BIT26)) OR // not set
                       (match_flag_noinvisible > 0 AND (flags & BIT26) = BIT26))) BEGIN
              SET proceed = 1
            END
          END ELSE BEGIN // spell-specific checks
            PATCH_IF ((match_level = o_level) OR (match_level < 0)) BEGIN
              SET proceed = 1
            END
          END
          PATCH_IF proceed BEGIN
            SET alter += 1
            SET multi_match -= 1
            PATCH_IF (type >= 0)       BEGIN WRITE_BYTE  (base + 0x00) type END
            PATCH_IF (location >= 0)   BEGIN WRITE_BYTE  (base + 0x02) location END
            PATCH_IF (target >= 0)     BEGIN WRITE_BYTE  (base + 0x0c) target END
            PATCH_IF (target_num >= 0) BEGIN WRITE_BYTE  (base + 0x0d) target_num END
            PATCH_IF (range >= 0)      BEGIN WRITE_SHORT (base + 0x0e) range END
            PATCH_IF (projectile >= 0) BEGIN WRITE_SHORT (base + pro_off) projectile END
            PATCH_IF ("%icon%" STRING_COMPARE_CASE "SAME") BEGIN WRITE_ASCIIE (base + 0x04) ~%icon%~ #8 END
            PATCH_IF abil_length = 0x38 BEGIN // item headers
              PATCH_IF (identify >= 0)       BEGIN WRITE_BYTE  (base + 0x01) identify       END
              PATCH_IF (alt_dicesize >= 0)   BEGIN WRITE_BYTE  (base + 0x03) alt_dicesize   END
              PATCH_IF (launcher >= 0)       BEGIN WRITE_BYTE  (base + 0x10) launcher       END
              PATCH_IF (alt_dicenumber >= 0) BEGIN WRITE_BYTE  (base + 0x11) alt_dicenumber END
              PATCH_IF (speed >= 0)          BEGIN WRITE_BYTE  (base + 0x12) speed          END
              PATCH_IF (alt_damage >= 0)     BEGIN WRITE_BYTE  (base + 0x13) alt_damage     END
              PATCH_IF (to_hit >= 0)         BEGIN WRITE_SHORT (base + 0x14) to_hit         END
              PATCH_IF (dicesize >= 0)       BEGIN WRITE_BYTE  (base + 0x16) dicesize       END
              PATCH_IF (primary >= 0)        BEGIN WRITE_BYTE  (base + 0x17) primary        END
              PATCH_IF (dicenumber >= 0)     BEGIN WRITE_BYTE  (base + 0x18) dicenumber     END
              PATCH_IF (secondary >= 0)      BEGIN WRITE_BYTE  (base + 0x19) secondary      END
              PATCH_IF (damage >= 0)         BEGIN WRITE_SHORT (base + 0x1a) damage         END
              PATCH_IF (damage_type >= 0)    BEGIN WRITE_SHORT (base + 0x1c) damage_type    END
              PATCH_IF (charges >= 0)        BEGIN WRITE_SHORT (base + 0x22) charges        END
              PATCH_IF (drained >= 0)        BEGIN WRITE_SHORT (base + 0x24) drained        END
              PATCH_IF (overhand >= 0)       BEGIN WRITE_SHORT (base + 0x2c) overhand       END
              PATCH_IF (backhand >= 0)       BEGIN WRITE_SHORT (base + 0x2e) backhand       END
              PATCH_IF (thrust >= 0)         BEGIN WRITE_SHORT (base + 0x30) thrust         END
              PATCH_IF (arrow >= 0)          BEGIN WRITE_SHORT (base + 0x32) arrow          END
              PATCH_IF (bolt >= 0)           BEGIN WRITE_SHORT (base + 0x34) bolt           END
              PATCH_IF (bullet >= 0)         BEGIN WRITE_SHORT (base + 0x36) bullet         END
  
              PATCH_IF (flag_strength = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT0)  END
              PATCH_IF (flag_strength > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT0)  END
              PATCH_IF (flag_break = 0)       BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT1)  END
              PATCH_IF (flag_break > 0)       BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT1)  END
              PATCH_IF (flag_str_damage = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT2)  END
              PATCH_IF (flag_str_damage > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT2)  END
              PATCH_IF (flag_str_to_hit = 0)  BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT3)  END
              PATCH_IF (flag_str_to_hit > 0)  BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT3)  END
              PATCH_IF (flag_sanctuary = 0)   BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT9)  END
              PATCH_IF (flag_sanctuary > 0)   BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT9)  END
              PATCH_IF (flag_hostile = 0)     BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT10) END
              PATCH_IF (flag_hostile > 0)     BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT10) END
              PATCH_IF (flag_recharge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT11) END
              PATCH_IF (flag_recharge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT11) END
              PATCH_IF (flag_bypass = 0)      BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT16) END
              PATCH_IF (flag_bypass > 0)      BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT16) END
              PATCH_IF (flag_keenedge = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT17) END
              PATCH_IF (flag_keenedge > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT17) END
              PATCH_IF (flag_backstab = 0)    BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT25) END
              PATCH_IF (flag_backstab > 0)    BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT25) END
              PATCH_IF (flag_noinvisible = 0) BEGIN WRITE_LONG (base + 0x26) (THIS &  `BIT26) END
              PATCH_IF (flag_noinvisible > 0) BEGIN WRITE_LONG (base + 0x26) (THIS BOR BIT26) END
            END ELSE BEGIN // spell headers
              PATCH_IF (level >= 0) BEGIN WRITE_SHORT (base + 0x10) level END
              PATCH_IF (speed >= 0) BEGIN WRITE_SHORT (base + 0x12) speed END
            END
          END // proceed check
        END // mutual fields check
      END // for loop
    END // header check
  END // abil_length check

  PATCH_IF (alter = 0 && !silent) BEGIN
    PATCH_WARN "WARNING: no effects altered on %SOURCE_FILE% via ALTER_HEADER"
  END

  PATCH_IF (verbose && !silent) BEGIN
    READ_LONG 0x0c strref
    PATCH_IF ((strref > 0) AND (strref < 200000)) BEGIN
      READ_STRREF 0x0c name
    END ELSE BEGIN
      READ_STRREF 0x08 name
    END
    PATCH_PRINT "              ~%SOURCE_FILE%~   ~override~ // %name%, %alter% effect(s) altered"
  END

END