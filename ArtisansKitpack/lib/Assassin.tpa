LOAD_TRA ~ArtisansKitpack/Assassin/languages/english/setup.tra~

COPY ~%MOD_FOLDER%/Assassin/2da~ ~override~
COPY ~%MOD_FOLDER%/Assassin/bams~ ~override~
COPY ~%MOD_FOLDER%/Assassin/spells~ ~override~

// ICONS

DEFINE_ACTION_FUNCTION cd_new_portrait_icon
  INT_VAR string = 0
  STR_VAR bam_file = "****"
  RET     icon
  BEGIN

  COPY_EXISTING ~statdesc.2da~ ~override~
    COUNT_2DA_ROWS 3 count
    READ_2DA_ENTRY (count - 1) 0 3 icon
    SET icon += 1

  APPEND ~statdesc.2da~ ~%icon% %string% %bam_file%~ UNLESS ~%bam_file%~

END

LAF cd_new_portrait_icon INT_VAR string = RESOLVE_STR_REF(~Backstab: Paralysis~) STR_VAR bam_file = c0asic01 RET c0asic01 = icon END
LAF cd_new_portrait_icon INT_VAR string = RESOLVE_STR_REF(~Backstab: Hamstring~) STR_VAR bam_file = c0asic02 RET c0asic02 = icon END
LAF cd_new_portrait_icon INT_VAR string = RESOLVE_STR_REF(~Backstab: Bleeding~) STR_VAR bam_file = c0asic03 RET c0asic03 = icon END
LAF cd_new_portrait_icon INT_VAR string = RESOLVE_STR_REF(~Backstab: Cutthroat~) STR_VAR bam_file = c0asic04 RET c0asic04 = icon END
LAF cd_new_portrait_icon INT_VAR string = RESOLVE_STR_REF(~Backstab: Lethal~) STR_VAR bam_file = c0asic05 RET c0asic05 = icon END

  COPY_EXISTING ~alignmnt.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 1 cols 0
		SET_2DA_ENTRY (%patch_row%) 2 cols 1
		SET_2DA_ENTRY (%patch_row%) 3 cols 1
		SET_2DA_ENTRY (%patch_row%) 4 cols 0
		SET_2DA_ENTRY (%patch_row%) 5 cols 1
		SET_2DA_ENTRY (%patch_row%) 6 cols 1
		SET_2DA_ENTRY (%patch_row%) 7 cols 0
		SET_2DA_ENTRY (%patch_row%) 8 cols 1
		SET_2DA_ENTRY (%patch_row%) 9 cols 1
	  END
	END

  COPY_EXISTING ~abclasrq.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 4 cols 15
	  END
	END

  COPY_EXISTING ~abclsmod.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 6 cols %-2%
	  END
	END

  COPY_EXISTING ~luabbr.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 1 cols ~c0as~
	  END
	END
	
COPY_EXISTING ~clasiskl.2da~ ~override~
SET_2DA_ENTRY 6 36 1 ~10~
SET_2DA_ENTRY 7 36 1 ~10~
	
COPY_EXISTING ~thiefscl.2da~ ~override~
SET_2DA_ENTRY 9 36 1 ~0~
	
  COPY_EXISTING ~thiefskl.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 2 cols 10
	  END
	END
	
LAF ~GET_KIT_STRREF~ STR_VAR kit_name = ~ASSASIN~ RET kit_strref END
STRING_SET_EVALUATE kit_strref @1

// change backstab

ACTION_FOR_EACH file IN backstab crippstr sneakatt BEGIN

  ACTION_IF FILE_EXISTS_IN_GAME ~%file%.2da~ THEN BEGIN

    COPY_EXISTING ~%file%.2da~ ~override~
      COUNT_2DA_COLS col_num
      COUNT_2DA_ROWS (col_num - 1) row_num
      READ_2DA_ENTRY 0 (col_num - 2) (col_num - 1) level    // read last enry of top line as level
      READ_2DA_ENTRY 0 0 (col_num - 1) val                  // weidu seems to freak out with a top line w/ one less entry
      SET_2DA_ENTRY  0 0 (col_num - 1) ~CD_DELETE_ME %val%~ // temp
      FOR (index = level ; index < 50 ; ++index) BEGIN
        SET new = index + 1
        FOR (index2 = 1 ; index2 < row_num ; ++index2) BEGIN // extend all other rows with previous column's value
          READ_2DA_ENTRY index2 (col_num - 1) (col_num) val
          SET_2DA_ENTRY  index2 (col_num - 1) (col_num) ~%val% %val%~
        END
        SET_2DA_ENTRY 0 (col_num - 1) (col_num) ~%index% %new%~ // extend level row
        SET col_num += 1
      END
      REPLACE_TEXTUALLY ~CD_DELETE_ME~ ~~
      PRETTY_PRINT_2DA
      BUT_ONLY

  END

END

COPY_EXISTING ~backstab.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 1 cols 2
		SET_2DA_ENTRY (%patch_row%) 2 cols 3
		SET_2DA_ENTRY (%patch_row%) 3 cols 3
		SET_2DA_ENTRY (%patch_row%) 4 cols 3
		SET_2DA_ENTRY (%patch_row%) 5 cols 3
		SET_2DA_ENTRY (%patch_row%) 6 cols 4
		SET_2DA_ENTRY (%patch_row%) 7 cols 4
		SET_2DA_ENTRY (%patch_row%) 8 cols 4
		SET_2DA_ENTRY (%patch_row%) 9 cols 4
		SET_2DA_ENTRY (%patch_row%) 10 cols 5
		SET_2DA_ENTRY (%patch_row%) 11 cols 5
		SET_2DA_ENTRY (%patch_row%) 12 cols 5
		SET_2DA_ENTRY (%patch_row%) 13 cols 5
		SET_2DA_ENTRY (%patch_row%) 14 cols 6
		SET_2DA_ENTRY (%patch_row%) 15 cols 6
		SET_2DA_ENTRY (%patch_row%) 16 cols 6
		SET_2DA_ENTRY (%patch_row%) 17 cols 6
		SET_2DA_ENTRY (%patch_row%) 18 cols 7
		SET_2DA_ENTRY (%patch_row%) 19 cols 7
		SET_2DA_ENTRY (%patch_row%) 20 cols 7
		SET_2DA_ENTRY (%patch_row%) 21 cols 7
		SET_2DA_ENTRY (%patch_row%) 22 cols 7
		SET_2DA_ENTRY (%patch_row%) 23 cols 7
		SET_2DA_ENTRY (%patch_row%) 24 cols 7
		SET_2DA_ENTRY (%patch_row%) 25 cols 7
		SET_2DA_ENTRY (%patch_row%) 26 cols 7
		SET_2DA_ENTRY (%patch_row%) 27 cols 7
		SET_2DA_ENTRY (%patch_row%) 28 cols 7
		SET_2DA_ENTRY (%patch_row%) 29 cols 7
		SET_2DA_ENTRY (%patch_row%) 30 cols 7
		SET_2DA_ENTRY (%patch_row%) 31 cols 7
		SET_2DA_ENTRY (%patch_row%) 32 cols 7
		SET_2DA_ENTRY (%patch_row%) 33 cols 7
		SET_2DA_ENTRY (%patch_row%) 34 cols 7
		SET_2DA_ENTRY (%patch_row%) 35 cols 7
		SET_2DA_ENTRY (%patch_row%) 36 cols 7
		SET_2DA_ENTRY (%patch_row%) 37 cols 7
		SET_2DA_ENTRY (%patch_row%) 38 cols 7
		SET_2DA_ENTRY (%patch_row%) 39 cols 7
		SET_2DA_ENTRY (%patch_row%) 40 cols 7
		SET_2DA_ENTRY (%patch_row%) 41 cols 7
		SET_2DA_ENTRY (%patch_row%) 42 cols 7
		SET_2DA_ENTRY (%patch_row%) 43 cols 7
		SET_2DA_ENTRY (%patch_row%) 44 cols 7
		SET_2DA_ENTRY (%patch_row%) 45 cols 7
		SET_2DA_ENTRY (%patch_row%) 46 cols 7
		SET_2DA_ENTRY (%patch_row%) 47 cols 7
		SET_2DA_ENTRY (%patch_row%) 48 cols 7
		SET_2DA_ENTRY (%patch_row%) 49 cols 7
		SET_2DA_ENTRY (%patch_row%) 50 cols 7
		SET_2DA_ENTRY (%patch_row%) 51 cols 7
	  END
	END

COPY_EXISTING ~crippstr.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 1 cols 0
		SET_2DA_ENTRY (%patch_row%) 2 cols 1
		SET_2DA_ENTRY (%patch_row%) 3 cols 1
		SET_2DA_ENTRY (%patch_row%) 4 cols 2
		SET_2DA_ENTRY (%patch_row%) 5 cols 2
		SET_2DA_ENTRY (%patch_row%) 6 cols 3
		SET_2DA_ENTRY (%patch_row%) 7 cols 3
		SET_2DA_ENTRY (%patch_row%) 8 cols 4
		SET_2DA_ENTRY (%patch_row%) 9 cols 4
		SET_2DA_ENTRY (%patch_row%) 10 cols 5
		SET_2DA_ENTRY (%patch_row%) 11 cols 5
		SET_2DA_ENTRY (%patch_row%) 12 cols 6
		SET_2DA_ENTRY (%patch_row%) 13 cols 6
		SET_2DA_ENTRY (%patch_row%) 14 cols 7
		SET_2DA_ENTRY (%patch_row%) 15 cols 7
		SET_2DA_ENTRY (%patch_row%) 16 cols 8
		SET_2DA_ENTRY (%patch_row%) 17 cols 8
		SET_2DA_ENTRY (%patch_row%) 18 cols 9
		SET_2DA_ENTRY (%patch_row%) 19 cols 9
		SET_2DA_ENTRY (%patch_row%) 20 cols 10
		SET_2DA_ENTRY (%patch_row%) 21 cols 10
		SET_2DA_ENTRY (%patch_row%) 22 cols 11
		SET_2DA_ENTRY (%patch_row%) 23 cols 11
		SET_2DA_ENTRY (%patch_row%) 24 cols 12
		SET_2DA_ENTRY (%patch_row%) 25 cols 12
		SET_2DA_ENTRY (%patch_row%) 26 cols 13
		SET_2DA_ENTRY (%patch_row%) 27 cols 13
		SET_2DA_ENTRY (%patch_row%) 28 cols 14
		SET_2DA_ENTRY (%patch_row%) 29 cols 14
		SET_2DA_ENTRY (%patch_row%) 30 cols 15
		SET_2DA_ENTRY (%patch_row%) 31 cols 15
		SET_2DA_ENTRY (%patch_row%) 32 cols 16
		SET_2DA_ENTRY (%patch_row%) 33 cols 16
		SET_2DA_ENTRY (%patch_row%) 34 cols 17
		SET_2DA_ENTRY (%patch_row%) 35 cols 17
		SET_2DA_ENTRY (%patch_row%) 36 cols 18
		SET_2DA_ENTRY (%patch_row%) 37 cols 18
		SET_2DA_ENTRY (%patch_row%) 38 cols 19
		SET_2DA_ENTRY (%patch_row%) 39 cols 19
		SET_2DA_ENTRY (%patch_row%) 40 cols 20
		SET_2DA_ENTRY (%patch_row%) 41 cols 20
		SET_2DA_ENTRY (%patch_row%) 42 cols 21
		SET_2DA_ENTRY (%patch_row%) 43 cols 21
		SET_2DA_ENTRY (%patch_row%) 44 cols 22
		SET_2DA_ENTRY (%patch_row%) 45 cols 22
		SET_2DA_ENTRY (%patch_row%) 46 cols 23
		SET_2DA_ENTRY (%patch_row%) 47 cols 23
		SET_2DA_ENTRY (%patch_row%) 48 cols 24
		SET_2DA_ENTRY (%patch_row%) 49 cols 24
		SET_2DA_ENTRY (%patch_row%) 50 cols 25
		SET_2DA_ENTRY (%patch_row%) 51 cols 25
	  END
	END
	
COPY_EXISTING ~crippstr.2da~ ~override~
	COUNT_2DA_COLS cols // amount of columns
	READ_2DA_ENTRIES_NOW rows cols // read all file into memory  
	FOR (row = 1; row < rows; ++row) BEGIN // iterate over rows
	  READ_2DA_ENTRY_FORMER rows row 0 ~text~ // read column value
	  PATCH_IF ~%text%~ STRING_EQUAL_CASE ~ASSASIN~ BEGIN
	    SET patch_row = %row%
		SET_2DA_ENTRY (%patch_row%) 1 cols 1
		SET_2DA_ENTRY (%patch_row%) 2 cols 2
		SET_2DA_ENTRY (%patch_row%) 3 cols 2
		SET_2DA_ENTRY (%patch_row%) 4 cols 3
		SET_2DA_ENTRY (%patch_row%) 5 cols 3
		SET_2DA_ENTRY (%patch_row%) 6 cols 4
		SET_2DA_ENTRY (%patch_row%) 7 cols 4
		SET_2DA_ENTRY (%patch_row%) 8 cols 5
		SET_2DA_ENTRY (%patch_row%) 9 cols 5
		SET_2DA_ENTRY (%patch_row%) 10 cols 6
		SET_2DA_ENTRY (%patch_row%) 11 cols 6
		SET_2DA_ENTRY (%patch_row%) 12 cols 7
		SET_2DA_ENTRY (%patch_row%) 13 cols 7
		SET_2DA_ENTRY (%patch_row%) 14 cols 8
		SET_2DA_ENTRY (%patch_row%) 15 cols 8
		SET_2DA_ENTRY (%patch_row%) 16 cols 9
		SET_2DA_ENTRY (%patch_row%) 17 cols 9
		SET_2DA_ENTRY (%patch_row%) 18 cols 10
		SET_2DA_ENTRY (%patch_row%) 19 cols 10
		SET_2DA_ENTRY (%patch_row%) 20 cols 11
		SET_2DA_ENTRY (%patch_row%) 21 cols 11
		SET_2DA_ENTRY (%patch_row%) 22 cols 12
		SET_2DA_ENTRY (%patch_row%) 23 cols 12
		SET_2DA_ENTRY (%patch_row%) 24 cols 13
		SET_2DA_ENTRY (%patch_row%) 25 cols 13
		SET_2DA_ENTRY (%patch_row%) 26 cols 14
		SET_2DA_ENTRY (%patch_row%) 27 cols 14
		SET_2DA_ENTRY (%patch_row%) 28 cols 15
		SET_2DA_ENTRY (%patch_row%) 29 cols 15
		SET_2DA_ENTRY (%patch_row%) 30 cols 16
		SET_2DA_ENTRY (%patch_row%) 31 cols 16
		SET_2DA_ENTRY (%patch_row%) 32 cols 17
		SET_2DA_ENTRY (%patch_row%) 33 cols 17
		SET_2DA_ENTRY (%patch_row%) 34 cols 18
		SET_2DA_ENTRY (%patch_row%) 35 cols 18
		SET_2DA_ENTRY (%patch_row%) 36 cols 19
		SET_2DA_ENTRY (%patch_row%) 37 cols 19
		SET_2DA_ENTRY (%patch_row%) 38 cols 20
		SET_2DA_ENTRY (%patch_row%) 39 cols 20
		SET_2DA_ENTRY (%patch_row%) 40 cols 21
		SET_2DA_ENTRY (%patch_row%) 41 cols 21
		SET_2DA_ENTRY (%patch_row%) 42 cols 22
		SET_2DA_ENTRY (%patch_row%) 43 cols 22
		SET_2DA_ENTRY (%patch_row%) 44 cols 23
		SET_2DA_ENTRY (%patch_row%) 45 cols 23
		SET_2DA_ENTRY (%patch_row%) 46 cols 24
		SET_2DA_ENTRY (%patch_row%) 47 cols 24
		SET_2DA_ENTRY (%patch_row%) 48 cols 25
		SET_2DA_ENTRY (%patch_row%) 49 cols 25
		SET_2DA_ENTRY (%patch_row%) 50 cols 26
		SET_2DA_ENTRY (%patch_row%) 51 cols 26
	  END
	END
	
////// MAKE STUDDED LEATHER AND ELVEN CHAIN UNUSABLE BY ASSASSINS

COPY_EXISTING_REGEXP GLOB ~.*\.itm~ ~override~ //copies all item files
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN // avoid crashing on empty items
    READ_BYTE    0x29 avenger //reads the byte containing the mage usability flag
    PATCH_IF ((avenger BAND 0b00100000) = 0b00100000) BEGIN // if it is usable by mages
      READ_BYTE    0x2b assassin //reads the byte containing bard usability flag
      READ_SHORT    0x1C type //reads the byte containing item type
      PATCH_IF (type = 2) BEGIN // if it is a robe or armor
        WRITE_BYTE    0x2b (assassin BOR 0b00000100)  // makes usable by bards
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES

ACTION_IF FILE_EXISTS_IN_GAME ~LEAT08.ITM~ THEN BEGIN
COPY_EXISTING ~leat08.itm~ ~override~ //copies all item files
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN // avoid crashing on empty items
    READ_BYTE    0x2b assassin //reads the byte containing the mage usability flag
    PATCH_IF ((assassin BAND 0b00000100) = 0b00000100) BEGIN // if it is usable by mages
      READ_SHORT    0x1C type //reads the byte containing item type
      PATCH_IF (type = 67) OR (type = 2) BEGIN // if it is a robe or armor
        WRITE_BYTE    0x2b (assassin BAND 0b00000000)  // makes usable by bards
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
  END

ACTION_IF FILE_EXISTS_IN_GAME ~dragarm.ITM~ THEN BEGIN
COPY_EXISTING ~dragarm.itm~ ~override~ //copies all item files
  PATCH_IF (SOURCE_SIZE > 0x71) BEGIN // avoid crashing on empty items
    READ_BYTE    0x2b assassin //reads the byte containing the mage usability flag
    PATCH_IF ((assassin BAND 0b00000100) = 0b00000100) BEGIN // if it is usable by mages
      READ_SHORT    0x1C type //reads the byte containing item type
      PATCH_IF (type = 67) OR (type = 2) BEGIN // if it is a robe or armor
        WRITE_BYTE    0x2b (assassin BAND 0b00000000)  // makes usable by bards
      END
    END
  END
BUT_ONLY_IF_IT_CHANGES
  END

ACTION_IF FILE_EXISTS_IN_GAME ~clabth02.2da~ THEN BEGIN
COPY ~%MOD_FOLDER%/Assassin/2da/clabth02.2da~ ~override~
END

ACTION_IF FILE_EXISTS_IN_GAME ~baldur.bcs~ THEN BEGIN
EXTEND_TOP ~baldur.bcs~ ~%MOD_FOLDER%/Assassin/scripts/reputation.baf~
END

ACTION_IF FILE_EXISTS_IN_GAME ~bdbaldur.bcs~ THEN BEGIN
EXTEND_TOP ~bdbaldur.bcs~ ~%MOD_FOLDER%/Assassin/scripts/reputation.baf~
END

ACTION_IF FILE_EXISTS_IN_GAME ~baldur25.bcs~ THEN BEGIN
EXTEND_TOP ~baldur25.bcs~ ~%MOD_FOLDER%/Assassin/scripts/reputation.baf~
END

COPY ~%MOD_FOLDER%/Assassin/spells/c0ashla1.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@2 /* Vulnerable */)
  END
SAY NAME1 @3 /* Expose Weakness */
SAY NAME2 @3 /* Expose Weakness */
SAY UNIDENTIFIED_DESC @4 /* Expose Weakness
To an assassin, no enemy is without a weak point. Using this ability, the assassin may mark a target as vulnerable, reducing their Armor Class by 10 points and setting their physical resistance (if any) to zero for three rounds. Additionally, if the target is immune to backstabs, they lose their immunity permanently. This ability can be taken multiple times, but an assassin can only mark a single target at any given time. */

COPY ~%MOD_FOLDER%/Assassin/spells/c0ashla2.spl~ ~override~
SAY NAME1 @5 /* Assassin's Blade */
SAY NAME2 @5 /* Assassin's Blade */
SAY UNIDENTIFIED_DESC @6 /* Assassin's Blade
A master assassin's blade must be honed to the sharpest edge. This innate ability permanently increases the assassin's critical hit chance with melee weapons by 10% and <PRO_HISHER> backstab modifier by 1.

Requires: Expose Weakness */

COPY ~%MOD_FOLDER%/Assassin/spells/c0ashla3.spl~ ~override~
SAY NAME1 @7 /* Death Attack */
SAY NAME2 @7 /* Death Attack */
SAY UNIDENTIFIED_DESC @8 /* Death Attack
A high-level assassin's intimate knowledge of vital spots on opponents allows <PRO_HIMHER> to, once per day, strike a lethal blow against a target. With this ability, the assassin's next attack within five rounds becomes a guaranteed critical hit and kills the target instantly on a failed save vs. death at -4.

Requires: Assassin's Blade */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin1.spl~ ~override~
SAY NAME1 @9 /* Enhanced Backstab */
SAY NAME2 @9 /* Enhanced Backstab */
SAY UNIDENTIFIED_DESC @10 /* Enhanced Backstab
The assassin is capable of crippling <PRO_HISHER> victim with <PRO_HISHER> backstabs, inflicting one of the following effects. Save modifiers decrease by one for every six levels of the assassin.

Paralysis: Target must save vs. death at +2 or become paralyzed for 2 rounds.
Hamstring: Target must save vs. death or have their movement rate and Dexterity halved for 8 rounds.
Bleeding: Target must save vs. death at +2 or suffer 1d4+1 piercing damage every round for 2 rounds + 1 round/6 levels.
Cutthroat: Target must save vs. death or be silenced for 20 rounds.
Lethality (Level 17+): Target must save vs. death at +4 or be slain instantly. */

COPY ~%MOD_FOLDER%/Assassin/spells/c0as#02.spl~ ~override~
SAY NAME1 @11 /* Cloak of Shadows */
SAY NAME2 @11 /* Cloak of Shadows */
SAY UNIDENTIFIED_DESC @12 /* Cloak of Shadows
The assassin becomes completely invisible and undetectable for two rounds or until the assassin attacks, becoming immune to all revealing effects. Even creatures that can see through invisibility are unable to target the assassin during this time. */

COPY ~%MOD_FOLDER%/Assassin/spells/c0as#p01.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@13 /* Poison */)
  END
COPY ~%MOD_FOLDER%/Assassin/spells/c0as#p1.spl~ ~override~
SAY NAME1 @14 /* Poison Weapon */
SAY NAME2 @14 /* Poison Weapon */
SAY UNIDENTIFIED_DESC @15 /* Poison Weapon
The assassin is capable of coating <PRO_HISHER> weapon for the next eight hours with a slow-acting but extremely potent poison. This poison deals damage every round and reduces the target's Constitution by one point every round for at least five rounds. After five rounds have passed, the target must make a Saving Throw vs. Death or become poisoned for another five rounds. Therefore, the poison has the potential to last indefinitely as long as the target does not make a successful Saving Throw. The target may not die of Constitution loss caused by the poison.
1st level: Target suffers two poison damage and loses one point of Constitution every round. No save modifier.
6th level: Target suffers four poison damage and loses one point of Constitution every round. Save modifier of -1.
11th level: Target suffers six poison damage and loses two points of Constitution every round. Save modifier of -2.
16th level: Target suffers eight poison damage and loses two points of Constitution every round. Save modifier of -3.
21st level: Target suffers ten poison damage and loses three points of Constitution every round. Save modifier of -4. */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin2.spl~ ~override~
    LPF ADD_SPELL_EFFECT
      INT_VAR
	    opcode = 142
	    target = 2
		timing = 9
        parameter2 = c0asic01
      END
SAY NAME1 @16 /* Backstab: Paralysis */
SAY NAME2 @16 /* Backstab: Paralysis */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin3.spl~ ~override~
    LPF ADD_SPELL_EFFECT
      INT_VAR
	    opcode = 142
	    target = 2
		timing = 9
        parameter2 = c0asic02
      END
SAY NAME1 @17 /* Backstab: Hamstring */
SAY NAME2 @17 /* Backstab: Hamstring */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin4.spl~ ~override~
    LPF ADD_SPELL_EFFECT
      INT_VAR
	    opcode = 142
	    target = 2
		timing = 9
        parameter2 = c0asic03
      END
SAY NAME1 @18 /* Backstab: Bleeding */
SAY NAME2 @18 /* Backstab: Bleeding */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin5.spl~ ~override~
    LPF ADD_SPELL_EFFECT
      INT_VAR
	    opcode = 142
	    target = 2
		timing = 9
        parameter2 = c0asic04
      END
SAY NAME1 @19 /* Backstab: Cutthroat */
SAY NAME2 @19 /* Backstab: Cutthroat */

COPY ~%MOD_FOLDER%/Assassin/spells/c0asin6.spl~ ~override~
    LPF ADD_SPELL_EFFECT
      INT_VAR
	    opcode = 142
	    target = 2
		timing = 9
        parameter2 = c0asic05
      END
SAY NAME1 @20 /* Backstab: Lethality */
SAY NAME2 @20 /* Backstab: Lethality */

COPY ~%MOD_FOLDER%/Assassin/spells/c0assp2.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@21 /* Hamstrung */)
  END
COPY ~%MOD_FOLDER%/Assassin/spells/c0assp3.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@22 /* Bleeding */)
  END
COPY ~%MOD_FOLDER%/Assassin/spells/c0assp4.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@23 /* Silenced */)
  END
  
COPY ~%MOD_FOLDER%/Assassin/spells/c0asinv2.spl~ ~override~
  LPF ALTER_EFFECT
    INT_VAR
      check_globals = 1
      check_headers = 1
      match_opcode = 139 // display string
	  parameter1 = RESOLVE_STR_REF (@24 /* Hidden Blade Ready */)
  END
